# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_final.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import yaml
from pathlib import Path
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QFileDialog


class Ui_MainWindow(object):
    def __init__(self):
        self.filters = "yml file (*.yml)"
        self.params_bool_list = []

        # general_params
        self.general_params_dict = {}
        self.v_allow_extra_chrom = False

        # globalfilt_params
        self.v_apply_indi_filters = False
        self.v_indiv_summary = False
        self.v_apply_snp_filters = False
        self.globalfilt_params_dict = {}

        # genstruct_params
        self.v_genetic_structure = False
        self.v_run_smartpca = False
        self.v_run_gds_pca = False
        self.v_ld_filt = False
        self.v_admixture = False
        self.v_fst_based_nj_tree = False
        self.v_est_1_min_ibs_based_nj_tree = False
        self.genstruct_params_dict = {}

        # treemix params
        self.v_treemix = False
        self.treemix_params_dict = {}

        # sig_sel_params
        self.v_sig_sel = False
        self.v_tajimas_d = False
        self.v_pi = False
        self.v_pairwise_fst = False
        self.v_single_vs_all_fst = False
        self.v_skip_chrmwise = False
        self.v_skip_phasing = False
        self.v_skip_sel_outgroup = False
        self.v_clr = False
        self.v_ihs = False
        self.v_nsl = False
        self.v_xpehh = False
        self.v_impute_status = False
        self.v_use_precomputed_afs = False
        self.sig_sel_params_dict = {}

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1387, 879)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.general_params_tab()
        self.globalfilt_params_tab()
        self.genstruct_params_tab()
        self.treemix_params_tab()
        self.sig_sel_params_tab()
        self.add_widget()

    def add_widget(self):
        self.gridLayout.addWidget(self.tabWidget_general_params, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1387, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuCite = QtWidgets.QMenu(self.menubar)
        self.menuCite.setObjectName("menuCite")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.save_action = QtWidgets.QAction(MainWindow)
        self.save_action.setObjectName("save_action")
        self.save_action.triggered.connect(self.save_yml)
        self.exit_action = QtWidgets.QAction(MainWindow)
        self.exit_action.setObjectName("exit_action")
        self.exit_action.triggered.connect(self.quit)
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionModule_1 = QtWidgets.QAction(MainWindow)
        self.actionModule_1.setObjectName("actionModule_1")
        self.actionModule_2 = QtWidgets.QAction(MainWindow)
        self.actionModule_2.setObjectName("actionModule_2")
        self.actionModule_3 = QtWidgets.QAction(MainWindow)
        self.actionModule_3.setObjectName("actionModule_3")
        self.actionModule_4 = QtWidgets.QAction(MainWindow)
        self.actionModule_4.setObjectName("actionModule_4")
        self.actionModule_5 = QtWidgets.QAction(MainWindow)
        self.actionModule_5.setObjectName("actionModule_5")
        self.menuFile.addAction(self.save_action)
        self.menuFile.addAction(self.exit_action)
        self.menuCite.addAction(self.actionModule_1)
        self.menuCite.addAction(self.actionModule_2)
        self.menuCite.addAction(self.actionModule_3)
        self.menuCite.addAction(self.actionModule_4)
        self.menuCite.addAction(self.actionModule_5)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuCite.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget_general_params.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def save_yml(self):
        yml_file, _ = QFileDialog.getSaveFileName(
            None, "Save File", filter=self.filters
        )
        if not yml_file:
            return
        self.path = Path(yml_file)
        general_param_out_dict = {
            "input": "",
            "outDir": "",
            "sample_map": "",
            "geo_plot_yml": "",
            "tile_yml": "",
            "chrm_map": "",
            "f_pop_cord": "",
            "f_pop_color": "",
            "fasta": "",
            "concate_vcf_prefix": "",
            "cm_to_bp": "",
            "max_chrom": "",
            "outgroup": "",
            "allow_extra_chrom": "",
        }
        globalfilt_param_out_dict = {
            "apply_indi_filters": "",
            "king_cutoff": "",
            "rem_indi": "",
            "mind": "",
            "indiv_summary": "",
            "apply_snp_filters": "",
            "remove_snps": "",
            "maf": "",
            "min_meanDP": "",
            "max_meanDP": "",
            "hwe": "",
            "max_meanDP": "",
            "minQ": "",
        }
        genstruct_param_out_dict = {
            "genetic_structure": "",
            "run_smartpca": "",
            "run_gds_pca": "",
            "ld_filt": "",
            "ld_window_size": "",
            "ld_step_size": "",
            "r2_value": "",
            "structure_remove_indi": "",
            "smartpca_param": "",
            "pop_color_file": "",
            "f_pop_marker": "",
            "pca_yml": "",
            "admixture": "",
            "admixture_yml": "",
            "starting_k_value": "",
            "ending_k_value": "",
            "cross_validation": "",
            "termination_criteria": "",
            "plot_pop_order": "",
            "fst_based_nj_tree": "",
            "fst_nj_yml": "",
            "est_1_min_ibs_based_nj_tree": "",
            "ibs_nj_yml": "",
        }
        sig_sel_param_out_dict = {
            "sig_sel": "",
            "tajimas_d": "",
            "pi": "",
            "pairwise_fst": "",
            "single_vs_all_fst": "",
            "skip_chrmwise": "",
            "skip_phasing": "",
            "skip_pop": "",
            "skip_sel_outgroup": "",
            "min_samples_per_pop": "",
            "tajimasd_window_size": "",
            "fst_window_size": "",
            "fst_step_size": "",
            "pi_window_size": "",
            "pi_step_size": "",
            "clr": "",
            "anc_files": "",
            "grid_space": "",
            "grid_points": "",
            "use_precomputed_afs": "",
            "use_recomb_map": "",
            "ihs": "",
            "nsl": "",
            "xpehh": "",
            "selscan_map": "",
            "ihs_args": "",
            "xpehh_args": "",
            "ref_vcf": "",
            "cm_map": "",
            "burnin_val": "",
            "iterations_val": "",
            "impute_status": "",
            "ne_val": "",
        }
        treemix_param_out_dict = {
            "treemix": "",
            "n_bootstrap": "",
            "upper_limit": "",
            "starting_m_value": "",
            "ending_m_value": "",
            "n_iter": "",
            "k_snps": "",
        }
        dict_out_list = [
            general_param_out_dict,
            globalfilt_param_out_dict,
            genstruct_param_out_dict,
            treemix_param_out_dict,
            sig_sel_param_out_dict,
        ]
        dict_in_list = [
            self.general_params_dict,
            self.globalfilt_params_dict,
            self.genstruct_params_dict,
            self.treemix_params_dict,
            self.sig_sel_params_dict,
        ]
        yml_list = []
        for d, vd in enumerate(dict_out_list):
            for k in vd:
                if k not in self.params_bool_list:
                    is_string = False
                    v = dict_in_list[d][k].text()
                    try:
                        v = int(v)
                    except:
                        try:
                            v = float(v)
                        except:
                            v = str(v)
                else:
                    v = dict_in_list[d][k]
                vd[k] = v
        for d in dict_out_list:
            yml_list.append(yaml.dump(d, sort_keys=False))
        self.path.write_text("".join(yml_list))

    def quit(self):
        sys.exit(0)

    def general_params_tab(self):
        self.tabWidget_general_params = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget_general_params.setMinimumSize(QtCore.QSize(1168, 0))
        self.tabWidget_general_params.setMaximumSize(QtCore.QSize(1335, 850))
        self.tabWidget_general_params.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tabWidget_general_params.setAutoFillBackground(True)
        self.tabWidget_general_params.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget_general_params.setObjectName("tabWidget_general_params")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.general_params_tab_layout()

    def general_params_tab_layout(self):
        self.layoutWidget = QtWidgets.QWidget(self.tab)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 60, 131, 611))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_input = QtWidgets.QLabel(self.layoutWidget)
        self.label_input.setObjectName("label_input")
        self.verticalLayout.addWidget(self.label_input)
        spacerItem = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem)
        self.label_outDir = QtWidgets.QLabel(self.layoutWidget)
        self.label_outDir.setObjectName("label_outDir")
        self.verticalLayout.addWidget(self.label_outDir)
        spacerItem1 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem1)
        self.label_sample_map = QtWidgets.QLabel(self.layoutWidget)
        self.label_sample_map.setObjectName("label_sample_map")
        self.verticalLayout.addWidget(self.label_sample_map)
        spacerItem2 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem2)
        self.label_geo_plot_yml = QtWidgets.QLabel(self.layoutWidget)
        self.label_geo_plot_yml.setObjectName("label_geo_plot_yml")
        self.verticalLayout.addWidget(self.label_geo_plot_yml)
        spacerItem3 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem3)
        self.label_tile_yml = QtWidgets.QLabel(self.layoutWidget)
        self.label_tile_yml.setObjectName("label_tile_yml")
        self.verticalLayout.addWidget(self.label_tile_yml)
        spacerItem4 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem4)
        self.label_chrm_map = QtWidgets.QLabel(self.layoutWidget)
        self.label_chrm_map.setObjectName("label_chrm_map")
        self.verticalLayout.addWidget(self.label_chrm_map)
        spacerItem5 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem5)
        self.label_f_pop_cord = QtWidgets.QLabel(self.layoutWidget)
        self.label_f_pop_cord.setObjectName("label_f_pop_cord")
        self.verticalLayout.addWidget(self.label_f_pop_cord)
        spacerItem6 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem6)
        self.label_f_pop_color = QtWidgets.QLabel(self.layoutWidget)
        self.label_f_pop_color.setObjectName("label_f_pop_color")
        self.verticalLayout.addWidget(self.label_f_pop_color)
        spacerItem7 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem7)
        self.label_fasta = QtWidgets.QLabel(self.layoutWidget)
        self.label_fasta.setObjectName("label_fasta")
        self.verticalLayout.addWidget(self.label_fasta)
        spacerItem8 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout.addItem(spacerItem8)
        self.label_concate_vcf_prefix = QtWidgets.QLabel(self.layoutWidget)
        self.label_concate_vcf_prefix.setObjectName("label_concate_vcf_prefix")
        self.verticalLayout.addWidget(self.label_concate_vcf_prefix)
        self.layoutWidget1 = QtWidgets.QWidget(self.tab)
        self.layoutWidget1.setGeometry(QtCore.QRect(170, 451, 144, 221))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.le_f_pop_cord()
        spacerItem9 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_3.addItem(spacerItem9)
        self.le_f_pop_color()
        spacerItem10 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_3.addItem(spacerItem10)
        self.le_fasta()
        spacerItem11 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_3.addItem(spacerItem11)
        self.le_concat_vcf_prefix()
        self.layoutWidget2 = QtWidgets.QWidget(self.tab)
        self.layoutWidget2.setGeometry(QtCore.QRect(330, 451, 20, 221))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        spacerItem12 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_4.addItem(spacerItem12)
        spacerItem13 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_4.addItem(spacerItem13)
        spacerItem14 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_4.addItem(spacerItem14)
        self.layoutWidget3 = QtWidgets.QWidget(self.tab)
        self.layoutWidget3.setGeometry(QtCore.QRect(410, 450, 132, 221))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_cm_to_bp = QtWidgets.QLabel(self.layoutWidget3)
        self.label_cm_to_bp.setObjectName("label_cm_to_bp")
        self.verticalLayout_5.addWidget(self.label_cm_to_bp)
        spacerItem15 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_5.addItem(spacerItem15)
        self.label_max_chrom = QtWidgets.QLabel(self.layoutWidget3)
        self.label_max_chrom.setObjectName("label_max_chrom")
        self.verticalLayout_5.addWidget(self.label_max_chrom)
        spacerItem16 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_5.addItem(spacerItem16)
        self.label_outgroup = QtWidgets.QLabel(self.layoutWidget3)
        self.label_outgroup.setObjectName("label_outgroup")
        self.verticalLayout_5.addWidget(self.label_outgroup)
        spacerItem17 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_5.addItem(spacerItem17)
        self.label_allow_extra_chrom = QtWidgets.QLabel(self.layoutWidget3)
        self.label_allow_extra_chrom.setObjectName("label_allow_extra_chrom")
        self.verticalLayout_5.addWidget(self.label_allow_extra_chrom)
        self.layoutWidget4 = QtWidgets.QWidget(self.tab)
        self.layoutWidget4.setGeometry(QtCore.QRect(560, 450, 144, 221))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.layoutWidget4)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.le_cm_to_bp()
        spacerItem18 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_6.addItem(spacerItem18)
        self.le_max_chrom()
        spacerItem19 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_6.addItem(spacerItem19)
        self.le_outgroup()
        spacerItem20 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_6.addItem(spacerItem20)
        self.cb_allow_extra_chrom()
        self.layoutWidget5 = QtWidgets.QWidget(self.tab)
        self.layoutWidget5.setGeometry(QtCore.QRect(720, 610, 20, 61))
        self.layoutWidget5.setObjectName("layoutWidget5")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.layoutWidget5)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        spacerItem21 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_7.addItem(spacerItem21)
        self.layoutWidget6 = QtWidgets.QWidget(self.tab)
        self.layoutWidget6.setGeometry(QtCore.QRect(720, 450, 20, 161))
        self.layoutWidget6.setObjectName("layoutWidget6")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.layoutWidget6)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        spacerItem22 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_8.addItem(spacerItem22)
        spacerItem23 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_8.addItem(spacerItem23)
        self.layoutWidget_4 = QtWidgets.QWidget(self.tab)
        self.layoutWidget_4.setGeometry(QtCore.QRect(720, 60, 20, 351))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.verticalLayout_77 = QtWidgets.QVBoxLayout(self.layoutWidget_4)
        self.verticalLayout_77.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_77.setObjectName("verticalLayout_77")
        spacerItem24 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_77.addItem(spacerItem24)
        spacerItem25 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_77.addItem(spacerItem25)
        spacerItem26 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_77.addItem(spacerItem26)
        spacerItem27 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_77.addItem(spacerItem27)
        spacerItem28 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_77.addItem(spacerItem28)
        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(self.tab)
        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(20, 730, 1291, 41))
        self.horizontalLayoutWidget_7.setObjectName("horizontalLayoutWidget_7")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.layoutWidget7 = QtWidgets.QWidget(self.tab)
        self.layoutWidget7.setGeometry(QtCore.QRect(170, 61, 531, 351))
        self.layoutWidget7.setObjectName("layoutWidget7")
        self.verticalLayout_79 = QtWidgets.QVBoxLayout(self.layoutWidget7)
        self.verticalLayout_79.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_79.setObjectName("verticalLayout_79")
        self.le_input()
        spacerItem29 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_79.addItem(spacerItem29)
        self.le_outdir()
        spacerItem30 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_79.addItem(spacerItem30)
        self.le_sample_map()
        spacerItem31 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_79.addItem(spacerItem31)
        self.le_geo_plot_yml()
        spacerItem32 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_79.addItem(spacerItem32)
        self.le_tile_yml()
        spacerItem33 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_79.addItem(spacerItem33)
        self.le_chrom_map()

    def le_input(self):
        self.lineEdit_input = QtWidgets.QLineEdit(self.layoutWidget7)
        self.lineEdit_input.setObjectName("lineEdit_input")
        self.verticalLayout_79.addWidget(self.lineEdit_input)
        self.lineEdit_input.setToolTip(
            'In case of vcf, the input should be ".csv" with first column as chromosome id, second column as path to the vcf file and third column, path to its respective index (for example, see: /test/test_input_vcf.csv). In case of plink, the input should be directly the path to the ".bed" file with its extension. Note that there should ONLY be ONE SET OF PLINK binary files in the specified path/folder, i.e. "--input *.{bed,bim,fam}"'
        )
        self.general_params_dict["input"] = self.lineEdit_input

    def le_outdir(self):
        self.lineEdit_outDir = QtWidgets.QLineEdit(self.layoutWidget7)
        self.lineEdit_outDir.setObjectName("lineEdit_outDir")
        self.verticalLayout_79.addWidget(self.lineEdit_outDir)
        self.lineEdit_outDir.setToolTip(
            "Path to the directory, where all the outputs will be stored. If the directory is not present, it will be created"
        )
        self.general_params_dict["outDir"] = self.lineEdit_outDir

    def le_sample_map(self):
        self.lineEdit_sample_map = QtWidgets.QLineEdit(self.layoutWidget7)
        self.lineEdit_sample_map.setObjectName("lineEdit_sample_map")
        self.verticalLayout_79.addWidget(self.lineEdit_sample_map)
        self.lineEdit_sample_map.setToolTip(
            'Path to the sample map file (for example, see: test/sample.map), format: first column as sample id and second column as population id. This argument is REQUIRED only if the input is vcf format that is listed as ".csv". Note that this file must end with the suffix ".map".'
        )
        self.general_params_dict["sample_map"] = self.lineEdit_sample_map

    def le_geo_plot_yml(self):
        self.lineEdit_geo_plot_yml = QtWidgets.QLineEdit(self.layoutWidget7)
        self.lineEdit_geo_plot_yml.setObjectName("lineEdit_geo_plot_yml")
        self.verticalLayout_79.addWidget(self.lineEdit_geo_plot_yml)
        self.lineEdit_geo_plot_yml.setToolTip(
            "Path to the yaml file containing parameters for plotting the samples on a map (for example, see: parameters/plots/plot_sample_on_map.yaml). Refer to read me documentation to know more details of this yaml file"
        )
        self.general_params_dict["geo_plot_yml"] = self.lineEdit_geo_plot_yml

    def le_tile_yml(self):
        self.lineEdit_tile_yml = QtWidgets.QLineEdit(self.layoutWidget7)
        self.lineEdit_tile_yml.setObjectName("lineEdit_tile_yml")
        self.verticalLayout_79.addWidget(self.lineEdit_tile_yml)
        self.lineEdit_tile_yml.setToolTip(
            "Path to the yaml file containing parameters for the geographical map to be used for plotting (for example, see: parameters/plots/tiles_info.yaml). Refer to read me for description of this yaml file"
        )
        self.general_params_dict["tile_yml"] = self.lineEdit_tile_yml

    def le_chrom_map(self):
        self.lineEdit_chrom_map = QtWidgets.QLineEdit(self.layoutWidget7)
        self.lineEdit_chrom_map.setObjectName("lineEdit_chrom_map")
        self.verticalLayout_79.addWidget(self.lineEdit_chrom_map)
        self.lineEdit_chrom_map.setToolTip(
            " If the inputs are plink binary files, map file is needed to set the chromosome id and its respective size in the vcf header (for example, see: examples/chrm_size.map). If not provided, the greatest coordinate for each chromosome will be considered its total size."
        )
        self.general_params_dict["chrm_map"] = self.lineEdit_chrom_map

    def le_f_pop_cord(self):
        self.lineEdit_f_pop_cord = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_f_pop_cord.setObjectName("lineEdit_f_pop_cord")
        self.verticalLayout_3.addWidget(self.lineEdit_f_pop_cord)
        self.lineEdit_f_pop_cord.setToolTip(
            'Path to the file containing population name as first column and its latitude, longitude as second column (for example, see: test/geo_data.txt"'
        )
        self.general_params_dict["f_pop_cord"] = self.lineEdit_f_pop_cord

    def le_f_pop_color(self):
        self.lineEdit_f_pop_color = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_f_pop_color.setObjectName("lineEdit_f_pop_color")
        self.verticalLayout_3.addWidget(self.lineEdit_f_pop_color)
        self.lineEdit_f_pop_color.setToolTip(
            'Path to the file containing population name as first column and color in hex codes as second column (for example, see: test/pop_color.txt". If not provided, random colors will be chosen to represent each population'
        )
        self.general_params_dict["f_pop_color"] = self.lineEdit_f_pop_color

    def le_fasta(self):
        self.lineEdit_fasta = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_fasta.setObjectName("lineEdit_fasta")
        self.verticalLayout_3.addWidget(self.lineEdit_fasta)
        self.lineEdit_fasta.setToolTip(
            " If the inputs are plink binary files, fasta file is needed to set the reference allele in the converted vcf files. If not provided, the major allele will be set as the reference allele for all positions for all analyses"
        )
        self.general_params_dict["fasta"] = self.lineEdit_fasta

    def le_concat_vcf_prefix(self):
        self.lineEdit_concate_vcf_prefix = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_concate_vcf_prefix.setObjectName("lineEdit_concate_vcf_prefix")
        self.verticalLayout_3.addWidget(self.lineEdit_concate_vcf_prefix)
        self.lineEdit_concate_vcf_prefix.setToolTip(
            " File prefix to be set after concating vcf file chromosome-wise"
        )
        self.general_params_dict[
            "concate_vcf_prefix"
        ] = self.lineEdit_concate_vcf_prefix

    def le_cm_to_bp(self):
        self.lineEdit_cm_to_bp = QtWidgets.QLineEdit(self.layoutWidget4)
        self.lineEdit_cm_to_bp.setObjectName("lineEdit_cm_to_bp")
        self.verticalLayout_6.addWidget(self.lineEdit_cm_to_bp)
        self.lineEdit_cm_to_bp.setToolTip(
            "Specify how many bp should be considered as 1 cm. To be used only, when recombination files are not provided, default: 1000000"
        )
        self.general_params_dict["cm_to_bp"] = self.lineEdit_cm_to_bp

    def le_max_chrom(self):
        self.lineEdit_max_chrom = QtWidgets.QLineEdit(self.layoutWidget4)
        self.lineEdit_max_chrom.setObjectName("lineEdit_max_chrom")
        self.verticalLayout_6.addWidget(self.lineEdit_max_chrom)
        self.lineEdit_max_chrom.setToolTip(
            "maximum chromosomes to be considered for the analyses, note that the workflow deals only with the autosomal chromosomes"
        )
        self.general_params_dict["max_chrom"] = self.lineEdit_max_chrom

    def le_outgroup(self):
        self.lineEdit_outgroup = QtWidgets.QLineEdit(self.layoutWidget4)
        self.lineEdit_outgroup.setObjectName("lineEdit_outgroup")
        self.verticalLayout_6.addWidget(self.lineEdit_outgroup)
        self.lineEdit_outgroup.setToolTip(
            "The population id to be used as an outgroup, this will be used in the following analyses: treemix, fst and IBS-based clustering, signature of selection analyses"
        )
        self.general_params_dict["outgroup"] = self.lineEdit_outgroup

    def cb_allow_extra_chrom(self):
        self.checkBox_allow_extra_chrom = QtWidgets.QCheckBox(self.layoutWidget4)
        self.checkBox_allow_extra_chrom.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.checkBox_allow_extra_chrom.setAutoFillBackground(False)
        self.checkBox_allow_extra_chrom.setText("")
        self.checkBox_allow_extra_chrom.setCheckable(True)
        self.checkBox_allow_extra_chrom.setChecked(False)
        self.checkBox_allow_extra_chrom.setTristate(False)
        self.checkBox_allow_extra_chrom.setObjectName("checkBox_allow_extra_chrom")
        self.verticalLayout_6.addWidget(self.checkBox_allow_extra_chrom)
        self.checkBox_allow_extra_chrom.stateChanged.connect(
            self.cb_allow_extra_chrom_actions
        )
        self.checkBox_allow_extra_chrom.setToolTip(
            'set this argument to "true" if the chromosome id contains string, default: false'
        )
        self.general_params_dict["allow_extra_chrom"] = self.v_allow_extra_chrom
        self.params_bool_list.append("allow_extra_chrom")

    def cb_allow_extra_chrom_actions(self):
        if not self.v_allow_extra_chrom:
            self.v_allow_extra_chrom = True
        else:
            self.v_allow_extra_chrom = False
        self.general_params_dict["allow_extra_chrom"] = self.v_allow_extra_chrom

    def globalfilt_params_tab(self):
        self.tabWidget_general_params.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.layoutWidget_5 = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget_5.setGeometry(QtCore.QRect(20, 60, 160, 611))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.layoutWidget_5)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.label_rem_indi = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_rem_indi.setObjectName("label_rem_indi")
        self.verticalLayout_11.addWidget(self.label_rem_indi)
        spacerItem34 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem34)
        self.label_kingcutoff = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_kingcutoff.setObjectName("label_kingcutoff")
        self.verticalLayout_11.addWidget(self.label_kingcutoff)
        spacerItem35 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem35)
        self.label_mind = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_mind.setObjectName("label_mind")
        self.verticalLayout_11.addWidget(self.label_mind)
        spacerItem36 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem36)
        self.label_remove_snps = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_remove_snps.setObjectName("label_remove_snps")
        self.verticalLayout_11.addWidget(self.label_remove_snps)
        spacerItem37 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem37)
        self.label_maf = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_maf.setObjectName("label_maf")
        self.verticalLayout_11.addWidget(self.label_maf)
        spacerItem38 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem38)
        self.label_min_meanDP = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_min_meanDP.setObjectName("label_min_meanDP")
        self.verticalLayout_11.addWidget(self.label_min_meanDP)
        spacerItem39 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem39)
        self.label_max_meanDP = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_max_meanDP.setObjectName("label_max_meanDP")
        self.verticalLayout_11.addWidget(self.label_max_meanDP)
        spacerItem40 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem40)
        self.label_hwe = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_hwe.setObjectName("label_hwe")
        self.verticalLayout_11.addWidget(self.label_hwe)
        spacerItem41 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem41)
        self.label_max_missing = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_max_missing.setObjectName("label_max_missing")
        self.verticalLayout_11.addWidget(self.label_max_missing)
        spacerItem42 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_11.addItem(spacerItem42)
        self.label_minQ = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_minQ.setObjectName("label_minQ")
        self.verticalLayout_11.addWidget(self.label_minQ)
        self.layoutWidget_6 = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget_6.setGeometry(QtCore.QRect(480, 130, 121, 141))
        self.layoutWidget_6.setObjectName("layoutWidget_6")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.layoutWidget_6)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.label_apply_indi_filters = QtWidgets.QLabel(self.layoutWidget_6)
        self.label_apply_indi_filters.setObjectName("label_apply_indi_filters")
        self.verticalLayout_12.addWidget(self.label_apply_indi_filters)
        spacerItem43 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_12.addItem(spacerItem43)
        self.label_indiv_summary = QtWidgets.QLabel(self.layoutWidget_6)
        self.label_indiv_summary.setObjectName("label_indiv_summary")
        self.verticalLayout_12.addWidget(self.label_indiv_summary)
        spacerItem44 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_12.addItem(spacerItem44)
        self.label_apply_snp_filters = QtWidgets.QLabel(self.layoutWidget_6)
        self.label_apply_snp_filters.setObjectName("label_apply_snp_filters")
        self.verticalLayout_12.addWidget(self.label_apply_snp_filters)
        self.layoutWidget_21 = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget_21.setGeometry(QtCore.QRect(620, 130, 20, 141))
        self.layoutWidget_21.setObjectName("layoutWidget_21")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.layoutWidget_21)
        self.verticalLayout_30.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.cb_apply_indi_filters()
        spacerItem45 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_30.addItem(spacerItem45)
        self.cb_indiv_summary()
        spacerItem46 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_30.addItem(spacerItem46)
        self.cb_apply_snp_filters()
        self.layoutWidget_22 = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget_22.setGeometry(QtCore.QRect(660, 130, 21, 141))
        self.layoutWidget_22.setObjectName("layoutWidget_22")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout(self.layoutWidget_22)
        self.verticalLayout_31.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        spacerItem47 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_31.addItem(spacerItem47)
        spacerItem48 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_31.addItem(spacerItem48)
        self.layoutWidget_23 = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget_23.setGeometry(QtCore.QRect(360, 91, 20, 581))
        self.layoutWidget_23.setObjectName("layoutWidget_23")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout(self.layoutWidget_23)
        self.verticalLayout_33.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        spacerItem49 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem49)
        spacerItem50 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem50)
        spacerItem51 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem51)
        spacerItem52 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem52)
        spacerItem53 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem53)
        spacerItem54 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem54)
        spacerItem55 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem55)
        spacerItem56 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem56)
        spacerItem57 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_33.addItem(spacerItem57)
        self.horizontalLayoutWidget_9 = QtWidgets.QWidget(self.tab_3)
        self.horizontalLayoutWidget_9.setGeometry(QtCore.QRect(20, 730, 1291, 41))
        self.horizontalLayoutWidget_9.setObjectName("horizontalLayoutWidget_9")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_9)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.le_remove_indi()
        self.layoutWidget8 = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget8.setGeometry(QtCore.QRect(201, 92, 144, 581))
        self.layoutWidget8.setObjectName("layoutWidget8")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout(self.layoutWidget8)
        self.verticalLayout_32.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        spacerItem58 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem58)
        self.le_king_cutoff()
        spacerItem59 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem59)
        self.le_mind()
        spacerItem60 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem60)
        self.le_remove_snps()
        spacerItem61 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem61)
        self.le_maf()
        spacerItem62 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem62)
        self.le_min_meanDP()
        spacerItem63 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem63)
        self.le_max_meanDP()
        spacerItem64 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem64)
        self.le_hwe()
        spacerItem65 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem65)
        self.le_max_missing()
        spacerItem66 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_32.addItem(spacerItem66)
        self.le_minQ()

    def cb_apply_indi_filters(self):
        self.checkBox_apply_indi_filters = QtWidgets.QCheckBox(self.layoutWidget_21)
        self.checkBox_apply_indi_filters.setText("")
        self.checkBox_apply_indi_filters.setCheckable(True)
        self.checkBox_apply_indi_filters.setChecked(False)
        self.checkBox_apply_indi_filters.setTristate(False)
        self.checkBox_apply_indi_filters.setObjectName("checkBox_apply_indi_filters")
        self.verticalLayout_30.addWidget(self.checkBox_apply_indi_filters)
        self.checkBox_apply_indi_filters.stateChanged.connect(
            self.cb_apply_indi_filters_actions
        )
        self.checkBox_apply_indi_filters.setToolTip(
            " Whether or not to perform sample filtering. Note that setting this to false overrides all parameters associated with sample filtering. In other words, sample filtering will not be carried out irrespective of arguments set for --king_cutoff, --rem_indi or --mind. Default: false"
        )
        self.params_bool_list.append("apply_indi_filters")
        self.globalfilt_params_dict["apply_indi_filters"] = self.v_apply_indi_filters

    def cb_apply_indi_filters_actions(self):
        if not self.v_apply_indi_filters:
            self.v_apply_indi_filters = True
        else:
            self.v_apply_indi_filters = False
        self.globalfilt_params_dict["apply_indi_filters"] = self.v_apply_indi_filters

    def cb_indiv_summary(self):
        self.checkBox_indiv_summary = QtWidgets.QCheckBox(self.layoutWidget_21)
        self.checkBox_indiv_summary.setText("")
        self.checkBox_indiv_summary.setCheckable(True)
        self.checkBox_indiv_summary.setChecked(False)
        self.checkBox_indiv_summary.setTristate(False)
        self.checkBox_indiv_summary.setObjectName("checkBox_indiv_summary")
        self.verticalLayout_30.addWidget(self.checkBox_indiv_summary)
        self.checkBox_indiv_summary.stateChanged.connect(
            self.cb_apply_indiv_summary_actions
        )
        self.checkBox_indiv_summary.setToolTip(
            "whether or not to calculate sample-based summary statistics from vcf files, only after applying individual and sites based filtering"
        )
        self.params_bool_list.append("indiv_summary")
        self.globalfilt_params_dict["indiv_summary"] = self.v_indiv_summary

    def cb_apply_indiv_summary_actions(self):
        if not self.v_indiv_summary:
            self.v_indiv_summary = True
        else:
            self.v_indiv_summary = False
        self.globalfilt_params_dict["indiv_summary"] = self.v_indiv_summary

    def cb_apply_snp_filters(self):
        self.checkBox_apply_snp_filters = QtWidgets.QCheckBox(self.layoutWidget_21)
        self.checkBox_apply_snp_filters.setText("")
        self.checkBox_apply_snp_filters.setCheckable(True)
        self.checkBox_apply_snp_filters.setChecked(False)
        self.checkBox_apply_snp_filters.setTristate(False)
        self.checkBox_apply_snp_filters.setObjectName("checkBox_apply_snp_filters")
        self.verticalLayout_30.addWidget(self.checkBox_apply_snp_filters)
        self.checkBox_apply_snp_filters.stateChanged.connect(
            self.cb_apply_snp_filters_actions
        )
        self.checkBox_apply_snp_filters.setToolTip(
            'setting this to false overrides all other sites-filtering parameters, i.e. sites-filtering will not be carried out irrespective of any parameters set for --remove_snps,  --maf, --min_meanDP, --max_meanDP, --hwe, --max_missing and --minQ. Note that, depending on the input files, these parameters may or may not be applied. For example, depth-related information and SNP quality information are not available (of course) for plink bed files and therefore, these parameters will be ignored in that case. However, parameters like max_missing, hwe and maf are applied to vcf as well as to plink-bed files. Default: true remove_snps = "none" '
        )
        self.params_bool_list.append("apply_snp_filters")
        self.globalfilt_params_dict["apply_snp_filters"] = self.v_apply_snp_filters

    def cb_apply_snp_filters_actions(self):
        if not self.v_apply_snp_filters:
            self.v_apply_snp_filters = True
        else:
            self.v_apply_snp_filters = False
        self.globalfilt_params_dict["apply_snp_filters"] = self.v_apply_snp_filters

    def le_king_cutoff(self):
        self.lineEdit_king_cutoff = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_king_cutoff.setObjectName("lineEdit_king_cutoff")
        self.verticalLayout_32.addWidget(self.lineEdit_king_cutoff)
        self.lineEdit_king_cutoff.setToolTip(
            " King relationship coefficient value above which the pairs of individuals are considered to be related and based on these pairwise values, plink2 will output the unrelated samples. Setting this to any negative value or zero will skip this parameter"
        )
        self.globalfilt_params_dict["king_cutoff"] = self.lineEdit_king_cutoff

    def le_mind(self):
        self.lineEdit_mind = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_mind.setObjectName("lineEdit_mind")
        self.verticalLayout_32.addWidget(self.lineEdit_mind)
        self.lineEdit_mind.setToolTip(
            "samples with missing genotypes greater than this will be removed. Setting this to any negative value or zero will disable this parameter. Default: 0"
        )
        self.globalfilt_params_dict["mind"] = self.lineEdit_mind

    def le_remove_snps(self):
        self.lineEdit_remove_snps = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_remove_snps.setObjectName("lineEdit_remove_snps")
        self.verticalLayout_32.addWidget(self.lineEdit_remove_snps)
        self.lineEdit_remove_snps.setToolTip(
            'path to the file containing SNP ids to be removed in case of plink-bed files. In case of vcf file, this file should contain two columns: first column as chromsome_id and second column as positions to be removed. Setting this to "none" will disable this flag. Default: "none"'
        )
        self.globalfilt_params_dict["remove_snps"] = self.lineEdit_remove_snps

    def le_maf(self):
        self.lineEdit_maf = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_maf.setObjectName("lineEdit_maf")
        self.verticalLayout_32.addWidget(self.lineEdit_maf)
        self.lineEdit_maf.setToolTip(
            "sites with minor allele frequencies less than this will be filtered, if set to any value < 0, this filter will be ignored. Default: 0"
        )
        self.globalfilt_params_dict["maf"] = self.lineEdit_maf

    def le_min_meanDP(self):
        self.lineEdit_min_meanDP = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_min_meanDP.setObjectName("lineEdit_min_meanDP")
        self.verticalLayout_32.addWidget(self.lineEdit_min_meanDP)
        self.lineEdit_min_meanDP.setToolTip(
            "sites with average depth (across the samples) less than this will be filtered out, set to any value < 0, this filter will be ignored. Default: -9"
        )
        self.globalfilt_params_dict["min_meanDP"] = self.lineEdit_min_meanDP

    def le_max_meanDP(self):
        self.lineEdit_max_meanDP = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_max_meanDP.setObjectName("lineEdit_max_meanDP")
        self.verticalLayout_32.addWidget(self.lineEdit_max_meanDP)
        self.lineEdit_max_meanDP.setToolTip(
            "sites with average depth (across the samples) greater than this will be filtered out, set to any value < 0, this filter will be ignored. Default: -9"
        )
        self.globalfilt_params_dict["max_meanDP"] = self.lineEdit_max_meanDP

    def le_hwe(self):
        self.lineEdit_hwe = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_hwe.setObjectName("lineEdit_hwe")
        self.verticalLayout_32.addWidget(self.lineEdit_hwe)
        self.lineEdit_hwe.setToolTip(
            "sites with average depth (across the samples) less than this will be filtered out, set to any value < 0, this filter will be ignored. Default: -9"
        )
        self.globalfilt_params_dict["hwe"] = self.lineEdit_hwe

    def le_max_missing(self):
        self.lineEdit_max_missing = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_max_missing.setObjectName("lineEdit_max_missing")
        self.verticalLayout_32.addWidget(self.lineEdit_max_missing)
        self.lineEdit_max_missing.setToolTip(
            "sites with genotypes missing more than this proportion of samples will be filtered out, set to any value < 0, this filter will be ignored. Default: -9"
        )
        self.globalfilt_params_dict["max_missing"] = self.lineEdit_max_missing

    def le_minQ(self):
        self.lineEdit_minQ = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_minQ.setObjectName("lineEdit_minQ")
        self.verticalLayout_32.addWidget(self.lineEdit_minQ)
        self.lineEdit_minQ.setToolTip(
            "sites with SNP quality less than this will be filtered out, set to any value < 0, this filter will be ignored. Default:-9"
        )
        self.globalfilt_params_dict["minQ"] = self.lineEdit_minQ

    def le_remove_indi(self):
        self.lineEdit_rem_indi = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_rem_indi.setGeometry(QtCore.QRect(200, 60, 441, 25))
        self.lineEdit_rem_indi.setObjectName("lineEdit_rem_indi")
        self.lineEdit_rem_indi.setToolTip(
            "the path to the text file containing list of individuals to be removed"
        )
        self.globalfilt_params_dict["rem_indi"] = self.lineEdit_rem_indi

    def genstruct_params_tab(self):
        self.tabWidget_general_params.addTab(self.tab_3, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.layoutWidget_64 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget_64.setGeometry(QtCore.QRect(250, 260, 21, 411))
        self.layoutWidget_64.setObjectName("layoutWidget_64")
        self.verticalLayout_74 = QtWidgets.QVBoxLayout(self.layoutWidget_64)
        self.verticalLayout_74.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_74.setObjectName("verticalLayout_74")
        self.cb_genetic_structure()
        spacerItem67 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_74.addItem(spacerItem67)
        self.cb_run_smartpca()
        spacerItem68 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_74.addItem(spacerItem68)
        self.cb_run_gds_pca()
        spacerItem69 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_74.addItem(spacerItem69)
        self.cb_ld_filt()
        spacerItem70 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_74.addItem(spacerItem70)
        self.cb_admixture()
        spacerItem71 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_74.addItem(spacerItem71)
        self.cb_fst_nj_tree()
        spacerItem72 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_74.addItem(spacerItem72)
        self.cb_1_mins_ibs_nj_tree()
        self.layoutWidget_65 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget_65.setGeometry(QtCore.QRect(290, 260, 20, 411))
        self.layoutWidget_65.setObjectName("layoutWidget_65")
        self.verticalLayout_75 = QtWidgets.QVBoxLayout(self.layoutWidget_65)
        self.verticalLayout_75.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_75.setObjectName("verticalLayout_75")
        self.horizontalLayoutWidget_8 = QtWidgets.QWidget(self.tab_2)
        self.horizontalLayoutWidget_8.setGeometry(QtCore.QRect(20, 730, 1291, 41))
        self.horizontalLayoutWidget_8.setObjectName("horizontalLayoutWidget_8")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_8)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.layoutWidget9 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget9.setGeometry(QtCore.QRect(160, 59, 531, 151))
        self.layoutWidget9.setObjectName("layoutWidget9")
        self.verticalLayout_76 = QtWidgets.QVBoxLayout(self.layoutWidget9)
        self.verticalLayout_76.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_76.setObjectName("verticalLayout_76")
        self.le_s()
        spacerItem81 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_76.addItem(spacerItem81)
        self.le_fst_nj_yml()
        spacerItem82 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_76.addItem(spacerItem82)
        self.le_ibs_nj_yml()
        self.layoutWidget10 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget10.setGeometry(QtCore.QRect(20, 260, 206, 411))
        self.layoutWidget10.setObjectName("layoutWidget10")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.layoutWidget10)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.label_genetic_structure = QtWidgets.QLabel(self.layoutWidget10)
        self.label_genetic_structure.setObjectName("label_genetic_structure")
        self.verticalLayout_10.addWidget(self.label_genetic_structure)
        spacerItem83 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_10.addItem(spacerItem83)
        self.label_run_smartpca = QtWidgets.QLabel(self.layoutWidget10)
        self.label_run_smartpca.setObjectName("label_run_smartpca")
        self.verticalLayout_10.addWidget(self.label_run_smartpca)
        spacerItem84 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_10.addItem(spacerItem84)
        self.label_run_gds_pca = QtWidgets.QLabel(self.layoutWidget10)
        self.label_run_gds_pca.setObjectName("label_run_gds_pca")
        self.verticalLayout_10.addWidget(self.label_run_gds_pca)
        spacerItem85 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_10.addItem(spacerItem85)
        self.label_ld_filt = QtWidgets.QLabel(self.layoutWidget10)
        self.label_ld_filt.setObjectName("label_ld_filt")
        self.verticalLayout_10.addWidget(self.label_ld_filt)
        spacerItem86 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_10.addItem(spacerItem86)
        self.label_admixture = QtWidgets.QLabel(self.layoutWidget10)
        self.label_admixture.setObjectName("label_admixture")
        self.verticalLayout_10.addWidget(self.label_admixture)
        spacerItem87 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_10.addItem(spacerItem87)
        self.label_fst_based_nj_tree = QtWidgets.QLabel(self.layoutWidget10)
        self.label_fst_based_nj_tree.setObjectName("label_fst_based_nj_tree")
        self.verticalLayout_10.addWidget(self.label_fst_based_nj_tree)
        spacerItem88 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_10.addItem(spacerItem88)
        self.label_est1_min_ibs_based_nj_tree = QtWidgets.QLabel(self.layoutWidget10)
        self.label_est1_min_ibs_based_nj_tree.setObjectName(
            "label_est1_min_ibs_based_nj_tree"
        )
        self.verticalLayout_10.addWidget(self.label_est1_min_ibs_based_nj_tree)
        self.layoutWidget11 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget11.setGeometry(QtCore.QRect(21, 60, 119, 151))
        self.layoutWidget11.setObjectName("layoutWidget11")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.layoutWidget11)
        self.verticalLayout_23.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.label_pca_yml = QtWidgets.QLabel(self.layoutWidget11)
        self.label_pca_yml.setObjectName("label_pca_yml")
        self.verticalLayout_23.addWidget(self.label_pca_yml)
        spacerItem89 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_23.addItem(spacerItem89)
        self.label_nj_yml = QtWidgets.QLabel(self.layoutWidget11)
        self.label_nj_yml.setObjectName("label_nj_yml")
        self.verticalLayout_23.addWidget(self.label_nj_yml)
        spacerItem90 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_23.addItem(spacerItem90)
        self.label_bs_nj_yml = QtWidgets.QLabel(self.layoutWidget11)
        self.label_bs_nj_yml.setObjectName("label_bs_nj_yml")
        self.verticalLayout_23.addWidget(self.label_bs_nj_yml)
        self.layoutWidget12 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget12.setGeometry(QtCore.QRect(410, 261, 116, 411))
        self.layoutWidget12.setObjectName("layoutWidget12")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget12)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_smartpca_param = QtWidgets.QLabel(self.layoutWidget12)
        self.label_smartpca_param.setObjectName("label_smartpca_param")
        self.verticalLayout_2.addWidget(self.label_smartpca_param)
        spacerItem91 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_2.addItem(spacerItem91)
        self.label_pop_color_file = QtWidgets.QLabel(self.layoutWidget12)
        self.label_pop_color_file.setObjectName("label_pop_color_file")
        self.verticalLayout_2.addWidget(self.label_pop_color_file)
        spacerItem92 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_2.addItem(spacerItem92)
        self.label_f_pop_marker = QtWidgets.QLabel(self.layoutWidget12)
        self.label_f_pop_marker.setObjectName("label_f_pop_marker")
        self.verticalLayout_2.addWidget(self.label_f_pop_marker)
        spacerItem93 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_2.addItem(spacerItem93)
        self.label_ld_window_size = QtWidgets.QLabel(self.layoutWidget12)
        self.label_ld_window_size.setObjectName("label_ld_window_size")
        self.verticalLayout_2.addWidget(self.label_ld_window_size)
        spacerItem94 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_2.addItem(spacerItem94)
        self.label_ld_step_size = QtWidgets.QLabel(self.layoutWidget12)
        self.label_ld_step_size.setObjectName("label_ld_step_size")
        self.verticalLayout_2.addWidget(self.label_ld_step_size)
        spacerItem95 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_2.addItem(spacerItem95)
        self.label_starting_k_value = QtWidgets.QLabel(self.layoutWidget12)
        self.label_starting_k_value.setObjectName("label_starting_k_value")
        self.verticalLayout_2.addWidget(self.label_starting_k_value)
        spacerItem96 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_2.addItem(spacerItem96)
        self.label_ending_k_value = QtWidgets.QLabel(self.layoutWidget12)
        self.label_ending_k_value.setObjectName("label_ending_k_value")
        self.verticalLayout_2.addWidget(self.label_ending_k_value)
        self.layoutWidget13 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget13.setGeometry(QtCore.QRect(550, 261, 144, 411))
        self.layoutWidget13.setObjectName("layoutWidget13")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.layoutWidget13)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.le_smartpca_param()
        spacerItem97 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_9.addItem(spacerItem97)
        self.le_pop_color_file()
        spacerItem98 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_9.addItem(spacerItem98)
        self.le_f_pop_marker()
        spacerItem99 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_9.addItem(spacerItem99)
        self.le_ld_window_size()
        spacerItem100 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_9.addItem(spacerItem100)
        self.le_ld_step_size()
        spacerItem101 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_9.addItem(spacerItem101)
        self.le_starting_k_value()
        spacerItem102 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_9.addItem(spacerItem102)
        self.le_ending_k_value()
        self.layoutWidget14 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget14.setGeometry(QtCore.QRect(710, 261, 20, 411))
        self.layoutWidget14.setObjectName("layoutWidget14")
        self.verticalLayout_34 = QtWidgets.QVBoxLayout(self.layoutWidget14)
        self.verticalLayout_34.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.layoutWidget15 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget15.setGeometry(QtCore.QRect(830, 260, 160, 281))
        self.layoutWidget15.setObjectName("layoutWidget15")
        self.verticalLayout_35 = QtWidgets.QVBoxLayout(self.layoutWidget15)
        self.verticalLayout_35.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_35.setObjectName("verticalLayout_35")
        self.label_cross_validation = QtWidgets.QLabel(self.layoutWidget15)
        self.label_cross_validation.setObjectName("label_cross_validation")
        self.verticalLayout_35.addWidget(self.label_cross_validation)
        spacerItem109 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_35.addItem(spacerItem109)
        self.label_termination_criteria = QtWidgets.QLabel(self.layoutWidget15)
        self.label_termination_criteria.setObjectName("label_termination_criteria")
        self.verticalLayout_35.addWidget(self.label_termination_criteria)
        spacerItem110 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_35.addItem(spacerItem110)
        self.label_plot_pop_order = QtWidgets.QLabel(self.layoutWidget15)
        self.label_plot_pop_order.setObjectName("label_plot_pop_order")
        self.verticalLayout_35.addWidget(self.label_plot_pop_order)
        spacerItem111 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_35.addItem(spacerItem111)
        self.label_r2_value = QtWidgets.QLabel(self.layoutWidget15)
        self.label_r2_value.setObjectName("label_r2_value")
        self.verticalLayout_35.addWidget(self.label_r2_value)
        spacerItem112 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_35.addItem(spacerItem112)
        self.label_structure_remove_indi = QtWidgets.QLabel(self.layoutWidget15)
        self.label_structure_remove_indi.setObjectName("label_structure_remove_indi")
        self.verticalLayout_35.addWidget(self.label_structure_remove_indi)
        spacerItem300 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_35.addItem(spacerItem300)
        self.label_admixture_yml = QtWidgets.QLabel(self.layoutWidget15)
        self.label_admixture_yml.setObjectName("label_admixture_yml")
        self.verticalLayout_35.addWidget(self.label_admixture_yml)
        self.layoutWidget16 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget16.setGeometry(QtCore.QRect(1010, 260, 144, 281))
        self.layoutWidget16.setObjectName("layoutWidget16")
        self.verticalLayout_36 = QtWidgets.QVBoxLayout(self.layoutWidget16)
        self.verticalLayout_36.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_36.setObjectName("verticalLayout_36")
        self.le_cross_validation()
        spacerItem113 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_36.addItem(spacerItem113)
        self.le_termination_criteria()
        spacerItem114 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_36.addItem(spacerItem114)
        self.le_plot_pop_order()
        spacerItem115 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_36.addItem(spacerItem115)
        self.le_r2_value()
        spacerItem116 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_36.addItem(spacerItem116)
        self.le_structure_remove_indi()
        spacerItem301 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_36.addItem(spacerItem301)
        self.le_admixture_yml()
        self.layoutWidget17 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget17.setGeometry(QtCore.QRect(1170, 260, 20, 281))
        self.layoutWidget17.setObjectName("layoutWidget17")
        self.verticalLayout_37 = QtWidgets.QVBoxLayout(self.layoutWidget17)
        self.verticalLayout_37.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_37.setObjectName("verticalLayout_37")

    def cb_genetic_structure(self):
        self.checkBox_genetic_structure = QtWidgets.QCheckBox(self.layoutWidget_64)
        self.checkBox_genetic_structure.setText("")
        self.checkBox_genetic_structure.setChecked(False)
        self.checkBox_genetic_structure.setCheckable(True)
        self.checkBox_genetic_structure.setTristate(False)
        self.checkBox_genetic_structure.setObjectName("checkBox_genetic_structure")
        self.verticalLayout_74.addWidget(self.checkBox_genetic_structure)
        self.checkBox_genetic_structure.stateChanged.connect(
            self.cb_genetic_structure_actions
        )
        self.checkBox_genetic_structure.setToolTip(
            'setting this to "false" will skip processing this entire module, meaning all the following options will be disabled. Default: false '
        )
        self.genstruct_params_dict["genetic_structure"] = self.v_genetic_structure
        self.params_bool_list.append("genetic_structure")

    def cb_genetic_structure_actions(self):
        if not self.v_genetic_structure:
            self.v_genetic_structure = True
        else:
            self.v_genetic_structure = False
        self.genstruct_params_dict["genetic_structure"] = self.v_genetic_structure

    def cb_run_smartpca(self):
        self.checkBox_run_smartpca = QtWidgets.QCheckBox(self.layoutWidget_64)
        self.checkBox_run_smartpca.setText("")
        self.checkBox_run_smartpca.setChecked(False)
        self.checkBox_run_smartpca.setCheckable(True)
        self.checkBox_run_smartpca.setTristate(False)
        self.checkBox_run_smartpca.setObjectName("checkBox_run_smartpca")
        self.verticalLayout_74.addWidget(self.checkBox_run_smartpca)
        self.checkBox_run_smartpca.stateChanged.connect(self.cb_run_smartpca_actions)
        self.checkBox_run_smartpca.setToolTip(
            "run PCA using the method implemented in smartpca tool of eigensoft. Default: false"
        )
        self.genstruct_params_dict["run_smartpca"] = self.v_run_smartpca
        self.params_bool_list.append("run_smartpca")

    def cb_run_smartpca_actions(self):
        if not self.v_run_smartpca:
            self.v_run_smartpca = True
        else:
            self.v_run_smartpca = False
        self.genstruct_params_dict["run_smartpca"] = self.v_run_smartpca

    def cb_run_gds_pca(self):
        self.checkBox_run_gds_pca = QtWidgets.QCheckBox(self.layoutWidget_64)
        self.checkBox_run_gds_pca.setText("")
        self.checkBox_run_gds_pca.setChecked(False)
        self.checkBox_run_gds_pca.setCheckable(True)
        self.checkBox_run_gds_pca.setTristate(False)
        self.checkBox_run_gds_pca.setObjectName("checkBox_run_gds_pca")
        self.verticalLayout_74.addWidget(self.checkBox_run_gds_pca)
        self.checkBox_run_gds_pca.stateChanged.connect(self.cb_run_gds_pca_actions)
        self.checkBox_run_gds_pca.setToolTip(
            "run PCA using the method implemented in snprelate package of R. Default: true"
        )
        self.genstruct_params_dict["run_gds_pca"] = self.v_run_gds_pca
        self.params_bool_list.append("run_gds_pca")

    def cb_run_gds_pca_actions(self):
        if not self.v_run_gds_pca:
            self.v_run_gds_pca = True
        else:
            self.v_run_gds_pca = False
        self.genstruct_params_dict["run_gds_pca"] = self.v_run_gds_pca

    def cb_ld_filt(self):
        self.checkBox_ld_filt = QtWidgets.QCheckBox(self.layoutWidget_64)
        self.checkBox_ld_filt.setText("")
        self.checkBox_ld_filt.setChecked(False)
        self.checkBox_ld_filt.setCheckable(True)
        self.checkBox_ld_filt.setTristate(False)
        self.checkBox_ld_filt.setObjectName("checkBox_ld_filt")
        self.verticalLayout_74.addWidget(self.checkBox_ld_filt)
        self.checkBox_ld_filt.stateChanged.connect(self.cb_ld_filt_actions)
        self.checkBox_ld_filt.setToolTip(
            "whether or not to apply ld-based pruning of the dataset before running PCA or/and admixture analysis. Default: false."
        )
        self.params_bool_list.append("ld_filt")
        self.genstruct_params_dict["ld_filt"] = self.v_ld_filt

    def cb_ld_filt_actions(self):
        if not self.v_ld_filt:
            self.v_ld_filt = True
        else:
            self.v_ld_filt = False
        self.genstruct_params_dict["ld_filt"] = self.v_ld_filt

    def cb_admixture(self):
        self.checkBox_admixture = QtWidgets.QCheckBox(self.layoutWidget_64)
        self.checkBox_admixture.setText("")
        self.checkBox_admixture.setChecked(False)
        self.checkBox_admixture.setCheckable(True)
        self.checkBox_admixture.setTristate(False)
        self.checkBox_admixture.setObjectName("checkBox_admixture")
        self.verticalLayout_74.addWidget(self.checkBox_admixture)
        self.checkBox_admixture.stateChanged.connect(self.cb_admixture_actions)
        self.checkBox_admixture.setToolTip(
            "whether to run admixture analysis. Default: false"
        )
        self.genstruct_params_dict["admixture"] = self.v_admixture
        self.params_bool_list.append("admixture")

    def cb_admixture_actions(self):
        if not self.v_admixture:
            self.v_admixture = True
        else:
            self.v_admixture = False
        self.genstruct_params_dict["admixture"] = self.v_admixture

    def cb_fst_nj_tree(self):
        self.checkBox_fst_based_nj_tree = QtWidgets.QCheckBox(self.layoutWidget_64)
        self.checkBox_fst_based_nj_tree.setText("")
        self.checkBox_fst_based_nj_tree.setChecked(False)
        self.checkBox_fst_based_nj_tree.setObjectName("checkBox_fst_based_nj_tree")
        self.verticalLayout_74.addWidget(self.checkBox_fst_based_nj_tree)
        self.checkBox_fst_based_nj_tree.stateChanged.connect(
            self.cb_fst_nj_tree_actions
        )
        self.checkBox_fst_based_nj_tree.setToolTip(
            "whether or not to estimate NJ tree based on average pairwise fst distance between each pair of populations. Default: false"
        )
        self.genstruct_params_dict["fst_based_nj_tree"] = self.v_fst_based_nj_tree
        self.params_bool_list.append("fst_based_nj_tree")

    def cb_fst_nj_tree_actions(self):
        if not self.v_fst_based_nj_tree:
            self.v_fst_based_nj_tree = True
        else:
            self.v_fst_based_nj_tree = False
        self.genstruct_params_dict["fst_based_nj_tree"] = self.v_fst_based_nj_tree

    def cb_1_mins_ibs_nj_tree(self):
        self.checkBox_est_1_min_ibs_based_nj_tree = QtWidgets.QCheckBox(
            self.layoutWidget_64
        )
        self.checkBox_est_1_min_ibs_based_nj_tree.setText("")
        self.checkBox_est_1_min_ibs_based_nj_tree.setChecked(False)
        self.checkBox_est_1_min_ibs_based_nj_tree.setObjectName(
            "checkBox_est_1_min_ibs_based_nj_tree"
        )
        self.verticalLayout_74.addWidget(self.checkBox_est_1_min_ibs_based_nj_tree)
        self.checkBox_est_1_min_ibs_based_nj_tree.stateChanged.connect(
            self.cb_1_mins_ibs_nj_tree_actions
        )
        self.checkBox_est_1_min_ibs_based_nj_tree.setToolTip(
            "whether or not to estimate NJ tree based on 1-ibs distance between each pair of samples in the dataset"
        )
        self.genstruct_params_dict[
            "est_1_min_ibs_based_nj_tree"
        ] = self.v_est_1_min_ibs_based_nj_tree
        self.params_bool_list.append("est_1_min_ibs_based_nj_tree")

    def cb_1_mins_ibs_nj_tree_actions(self):
        if not self.v_est_1_min_ibs_based_nj_tree:
            self.v_est_1_min_ibs_based_nj_tree = True
        else:
            self.v_est_1_min_ibs_based_nj_tree = False
        self.genstruct_params_dict[
            "est_1_min_ibs_based_nj_tree"
        ] = self.v_est_1_min_ibs_based_nj_tree

    def le_s(self):
        self.lineEdit_pca_yml = QtWidgets.QLineEdit(self.layoutWidget9)
        self.lineEdit_pca_yml.setObjectName("lineEdit_pca_yml")
        self.verticalLayout_76.addWidget(self.lineEdit_pca_yml)
        self.lineEdit_pca_yml.setToolTip(
            'path to the yaml file containing the paramterers to plot interactive PCA results. Refer to  "./parameters/plots/pca.yml"'
        )
        self.genstruct_params_dict["pca_yml"] = self.lineEdit_pca_yml

    def le_fst_nj_yml(self):
        self.lineEdit_nj_yml = QtWidgets.QLineEdit(self.layoutWidget9)
        self.lineEdit_nj_yml.setObjectName("lineEdit_nj_yml")
        self.verticalLayout_76.addWidget(self.lineEdit_nj_yml)
        self.lineEdit_nj_yml.setToolTip(
            'path to the yaml file containing the paramterers to plot interactive Fst-based NJ tree. Refers to "./parametes/plots/fst_nj.yml"'
        )
        self.genstruct_params_dict["fst_nj_yml"] = self.lineEdit_nj_yml

    def le_ibs_nj_yml(self):
        self.lineEdit_ibs_nj_yml = QtWidgets.QLineEdit(self.layoutWidget9)
        self.lineEdit_ibs_nj_yml.setObjectName("lineEdit_ibs_nj_yml")
        self.verticalLayout_76.addWidget(self.lineEdit_ibs_nj_yml)
        self.lineEdit_ibs_nj_yml.setToolTip(
            'path to the yaml file containing the parameters of plotting interactive NJ tree. Refers to "./parameters/plots/ibs_nj.yml"'
        )
        self.genstruct_params_dict["ibs_nj_yml"] = self.lineEdit_ibs_nj_yml

    def le_smartpca_param(self):
        self.lineEdit_smartpca_param = QtWidgets.QLineEdit(self.layoutWidget13)
        self.lineEdit_smartpca_param.setObjectName("lineEdit_smartpca_param")
        self.verticalLayout_9.addWidget(self.lineEdit_smartpca_param)
        self.lineEdit_smartpca_param.setToolTip(
            'path to the file containing additional/optional parameters to apply to smartpca. To see the list of these parameters:https://github.com/chrchang/eigensoft/blob/master/POPGEN/README. Note that these six parameters file are already set internally by scalepopgen:"genotypename","snpname","indivname","evecoutname","evaloutname" and "numchrom". Default: "none"'
        )
        self.genstruct_params_dict["smartpca_param"] = self.lineEdit_smartpca_param

    def le_pop_color_file(self):
        self.lineEdit_pop_color_file = QtWidgets.QLineEdit(self.layoutWidget13)
        self.lineEdit_pop_color_file.setObjectName("lineEdit_pop_color_file")
        self.verticalLayout_9.addWidget(self.lineEdit_pop_color_file)
        self.lineEdit_pop_color_file.setToolTip(
            'path to the file containing color codes of each population to be plotted. This file should contain data in two columns: first column as pop_id and second column as color name of code. If no such file is provided, random colors will be chosen. Default: "none"'
        )
        self.genstruct_params_dict["pop_color_file"] = self.lineEdit_pop_color_file

    def le_f_pop_marker(self):
        self.lineEdit_f_pop_marker = QtWidgets.QLineEdit(self.layoutWidget13)
        self.lineEdit_f_pop_marker.setObjectName("lineEdit_f_pop_marker")
        self.verticalLayout_9.addWidget(self.lineEdit_f_pop_marker)
        self.lineEdit_f_pop_marker.setToolTip(
            'path to the file containing first column as population id and second column as marker shape. Available markers shape are listed in "./extra/markershapes.txt" . If no such file is provided, random marker shapes will be selected'
        )
        self.genstruct_params_dict["f_pop_marker"] = self.lineEdit_f_pop_marker

    def le_ld_window_size(self):
        self.lineEdit_ld_window_size = QtWidgets.QLineEdit(self.layoutWidget13)
        self.lineEdit_ld_window_size.setObjectName("lineEdit_ld_window_size")
        self.verticalLayout_9.addWidget(self.lineEdit_ld_window_size)
        self.lineEdit_ld_window_size.setToolTip(
            "window size for LD calculation (as implemented in plink). Default: 50"
        )
        self.genstruct_params_dict["ld_window_size"] = self.lineEdit_ld_window_size

    def le_ld_step_size(self):
        self.lineEdit_ld_step_size = QtWidgets.QLineEdit(self.layoutWidget13)
        self.lineEdit_ld_step_size.setObjectName("lineEdit_ld_step_size")
        self.verticalLayout_9.addWidget(self.lineEdit_ld_step_size)
        self.lineEdit_ld_step_size.setToolTip(
            "step size for LD calculation (as implemented in plink). Default: 10"
        )
        self.genstruct_params_dict["ld_step_size"] = self.lineEdit_ld_step_size

    def le_starting_k_value(self):
        self.lineEdit_starting_k_value = QtWidgets.QLineEdit(self.layoutWidget13)
        self.lineEdit_starting_k_value.setObjectName("lineEdit_starting_k_value")
        self.verticalLayout_9.addWidget(self.lineEdit_starting_k_value)
        self.lineEdit_starting_k_value.setToolTip(
            'starting range of "k" value to run admixture analysis. Default: 1'
        )
        self.genstruct_params_dict["starting_k_value"] = self.lineEdit_starting_k_value

    def le_ending_k_value(self):
        self.lineEdit_ending_k_value = QtWidgets.QLineEdit(self.layoutWidget13)
        self.lineEdit_ending_k_value.setObjectName("lineEdit_ending_k_value")
        self.verticalLayout_9.addWidget(self.lineEdit_ending_k_value)
        self.lineEdit_ending_k_value.setToolTip(
            ' ending range of "k" value to run admixture analysis. Default: 10'
        )
        self.genstruct_params_dict["ending_k_value"] = self.lineEdit_ending_k_value

    def le_cross_validation(self):
        self.lineEdit_cross_validation = QtWidgets.QLineEdit(self.layoutWidget16)
        self.lineEdit_cross_validation.setObjectName("lineEdit_cross_validation")
        self.verticalLayout_36.addWidget(self.lineEdit_cross_validation)
        self.lineEdit_cross_validation.setToolTip(
            'cross validation to be run on the results of each "k" value of admixture. Default: 5'
        )
        self.genstruct_params_dict["cross_validation"] = self.lineEdit_cross_validation

    def le_termination_criteria(self):
        self.lineEdit_termination_criteria = QtWidgets.QLineEdit(self.layoutWidget16)
        self.lineEdit_termination_criteria.setObjectName(
            "lineEdit_termination_criteria"
        )
        self.verticalLayout_36.addWidget(self.lineEdit_termination_criteria)
        self.lineEdit_termination_criteria.setToolTip(
            "termination criteria of admixture tool. Default: 0.0001"
        )
        self.genstruct_params_dict[
            "termination_criteria"
        ] = self.lineEdit_termination_criteria

    def le_plot_pop_order(self):
        self.lineEdit_plot_pop_order = QtWidgets.QLineEdit(self.layoutWidget16)
        self.lineEdit_plot_pop_order.setObjectName("lineEdit_plot_pop_order")
        self.verticalLayout_36.addWidget(self.lineEdit_plot_pop_order)
        self.lineEdit_plot_pop_order.setToolTip(
            'Spcify a text file with population ids in the order in which the Q-matrix of admixture is to be plotted.  Default: "none"'
        )
        self.genstruct_params_dict["plot_pop_order"] = self.lineEdit_plot_pop_order

    def le_r2_value(self):
        self.lineEdit_r2_value = QtWidgets.QLineEdit(self.layoutWidget16)
        self.lineEdit_r2_value.setObjectName("lineEdit_r2_value")
        self.verticalLayout_36.addWidget(self.lineEdit_r2_value)
        self.lineEdit_r2_value.setToolTip(
            "r2 value of a SNP pair above which one of the SNPs will be discarded. Default: 0.05"
        )
        self.genstruct_params_dict["r2_value"] = self.lineEdit_r2_value

    def le_structure_remove_indi(self):
        self.lineEdit_structure_remove_indi = QtWidgets.QLineEdit(self.layoutWidget16)
        self.lineEdit_structure_remove_indi.setObjectName(
            "lineEdit_structure_remove_indi"
        )
        self.verticalLayout_36.addWidget(self.lineEdit_structure_remove_indi)
        self.lineEdit_structure_remove_indi.setToolTip(
            ' path to the file containing list of individuals to be removed before running PCA and/or admixture. Note that this file should contain two columns: first column as population_id and second column as sample id to be removed. Default: "none".'
        )
        self.genstruct_params_dict[
            "structure_remove_indi"
        ] = self.lineEdit_structure_remove_indi

    def le_admixture_yml(self):
        self.lineEdit_admixture_yml = QtWidgets.QLineEdit(self.layoutWidget16)
        self.lineEdit_admixture_yml.setObjectName("lineEdit_admixture_yml")
        self.verticalLayout_36.addWidget(self.lineEdit_admixture_yml)
        self.lineEdit_admixture_yml.setToolTip(
            ' path to the yaml file containing the parameters of plotting interactive Q matrix of ADMIXTURE. Refers to "./parameters/plots/admixture.yml"'
        )
        self.genstruct_params_dict["admixture_yml"] = self.lineEdit_admixture_yml

    def treemix_params_tab(self):
        self.tabWidget_general_params.addTab(self.tab_2, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.layoutWidget_11 = QtWidgets.QWidget(self.tab_5)
        self.layoutWidget_11.setGeometry(QtCore.QRect(20, 60, 124, 421))
        self.layoutWidget_11.setObjectName("layoutWidget_11")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.layoutWidget_11)
        self.verticalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_treemix = QtWidgets.QLabel(self.layoutWidget_11)
        self.label_treemix.setObjectName("label_treemix")
        self.verticalLayout_17.addWidget(self.label_treemix)
        spacerItem121 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_17.addItem(spacerItem121)
        self.label_n_bootstrap = QtWidgets.QLabel(self.layoutWidget_11)
        self.label_n_bootstrap.setObjectName("label_n_bootstrap")
        self.verticalLayout_17.addWidget(self.label_n_bootstrap)
        spacerItem122 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_17.addItem(spacerItem122)
        self.label_upper_limit = QtWidgets.QLabel(self.layoutWidget_11)
        self.label_upper_limit.setObjectName("label_upper_limit")
        self.verticalLayout_17.addWidget(self.label_upper_limit)
        spacerItem123 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_17.addItem(spacerItem123)
        self.label_starting_m_value = QtWidgets.QLabel(self.layoutWidget_11)
        self.label_starting_m_value.setObjectName("label_starting_m_value")
        self.verticalLayout_17.addWidget(self.label_starting_m_value)
        spacerItem124 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_17.addItem(spacerItem124)
        self.label_ending_m_value = QtWidgets.QLabel(self.layoutWidget_11)
        self.label_ending_m_value.setObjectName("label_ending_m_value")
        self.verticalLayout_17.addWidget(self.label_ending_m_value)
        spacerItem125 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_17.addItem(spacerItem125)
        self.label_n_iter = QtWidgets.QLabel(self.layoutWidget_11)
        self.label_n_iter.setObjectName("label_n_iter")
        self.verticalLayout_17.addWidget(self.label_n_iter)
        spacerItem126 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_17.addItem(spacerItem126)
        self.label_k_snps = QtWidgets.QLabel(self.layoutWidget_11)
        self.label_k_snps.setObjectName("label_k_snps")
        self.verticalLayout_17.addWidget(self.label_k_snps)
        self.layoutWidget_12 = QtWidgets.QWidget(self.tab_5)
        self.layoutWidget_12.setGeometry(QtCore.QRect(320, 60, 20, 51))
        self.layoutWidget_12.setObjectName("layoutWidget_12")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.layoutWidget_12)
        self.verticalLayout_20.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        spacerItem127 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_20.addItem(spacerItem127)
        self.layoutWidget18 = QtWidgets.QWidget(self.tab_5)
        self.layoutWidget18.setGeometry(QtCore.QRect(160, 61, 144, 421))
        self.layoutWidget18.setObjectName("layoutWidget18")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.layoutWidget18)
        self.verticalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.cb_treemix()
        spacerItem128 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_18.addItem(spacerItem128)
        self.le_n_bootstrap()
        spacerItem129 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_18.addItem(spacerItem129)
        self.le_upper_limit()
        spacerItem130 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_18.addItem(spacerItem130)
        self.le_starting_m_value()
        spacerItem131 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_18.addItem(spacerItem131)
        self.le_ending_m_value()
        spacerItem132 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_18.addItem(spacerItem132)
        self.le_niter()
        spacerItem133 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_18.addItem(spacerItem133)
        self.le_k_snps()

    def cb_treemix(self):
        self.checkBox_treemix = QtWidgets.QCheckBox(self.layoutWidget18)
        self.checkBox_treemix.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.checkBox_treemix.setAutoFillBackground(False)
        self.checkBox_treemix.setText("")
        self.checkBox_treemix.setCheckable(True)
        self.checkBox_treemix.setChecked(False)
        self.checkBox_treemix.setTristate(False)
        self.checkBox_treemix.setObjectName("checkBox_treemix")
        self.verticalLayout_18.addWidget(self.checkBox_treemix)
        self.checkBox_treemix.stateChanged.connect(self.cb_treemix_actions)
        self.checkBox_treemix.setToolTip(
            "whether or not to perform treemix analysis. Default: false"
        )
        self.treemix_params_dict["treemix"] = self.v_treemix
        self.params_bool_list.append("treemix")

    def cb_treemix_actions(self):
        if not self.v_treemix:
            self.v_treemix = True
        else:
            self.v_treemix = False
        self.treemix_params_dict["treemix"] = self.v_treemix

    def le_n_bootstrap(self):
        self.lineEdit_n_bootstrap = QtWidgets.QLineEdit(self.layoutWidget18)
        self.lineEdit_n_bootstrap.setObjectName("lineEdit_n_bootstrap")
        self.verticalLayout_18.addWidget(self.lineEdit_n_bootstrap)
        self.lineEdit_n_bootstrap.setToolTip(
            'cross validation to be run on the results of each "k" value of admixture. Default: 5'
        )
        self.treemix_params_dict["n_bootstrap"] = self.lineEdit_n_bootstrap

    def le_upper_limit(self):
        self.lineEdit_upper_limit = QtWidgets.QLineEdit(self.layoutWidget18)
        self.lineEdit_upper_limit.setObjectName("lineEdit_upper_limit")
        self.verticalLayout_18.addWidget(self.lineEdit_upper_limit)
        self.lineEdit_upper_limit.setToolTip("upper limit number to be generated")
        self.treemix_params_dict["upper_limit"] = self.lineEdit_upper_limit

    def le_starting_m_value(self):
        self.lineEdit_starting_m_value = QtWidgets.QLineEdit(self.layoutWidget18)
        self.lineEdit_starting_m_value.setObjectName("lineEdit_starting_m_value")
        self.verticalLayout_18.addWidget(self.lineEdit_starting_m_value)
        self.lineEdit_starting_m_value.setToolTip(
            "starting value of number of migration ranges to be considered"
        )
        self.treemix_params_dict["starting_m_value"] = self.lineEdit_starting_m_value

    def le_ending_m_value(self):
        self.lineEdit_ending_m_value = QtWidgets.QLineEdit(self.layoutWidget18)
        self.lineEdit_ending_m_value.setObjectName("lineEdit_ending_m_value")
        self.verticalLayout_18.addWidget(self.lineEdit_ending_m_value)
        self.lineEdit_ending_m_value.setToolTip(
            "starting value of number of migration ranges to be considered"
        )
        self.treemix_params_dict["ending_m_value"] = self.lineEdit_ending_m_value

    def le_niter(self):
        self.lineEdit_niter = QtWidgets.QLineEdit(self.layoutWidget18)
        self.lineEdit_niter.setObjectName("lineEdit_niter")
        self.verticalLayout_18.addWidget(self.lineEdit_niter)
        self.lineEdit_niter.setToolTip(
            "starting value of number of migration ranges to be considered"
        )
        self.treemix_params_dict["n_iter"] = self.lineEdit_niter

    def le_k_snps(self):
        self.lineEdit_k_snps = QtWidgets.QLineEdit(self.layoutWidget18)
        self.lineEdit_k_snps.setObjectName("lineEdit_k_snps")
        self.verticalLayout_18.addWidget(self.lineEdit_k_snps)
        self.lineEdit_k_snps.setToolTip(
            "starting value of number of migration ranges to be considered"
        )
        self.treemix_params_dict["k_snps"] = self.lineEdit_k_snps

    def sig_sel_params_tab(self):
        self.tabWidget_general_params.addTab(self.tab_5, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.layoutWidget_8 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_8.setGeometry(QtCore.QRect(570, 60, 160, 611))
        self.layoutWidget_8.setObjectName("layoutWidget_8")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.layoutWidget_8)
        self.verticalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.label_min_samples_per_pop = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_min_samples_per_pop.setObjectName("label_min_samples_per_pop")
        self.verticalLayout_14.addWidget(self.label_min_samples_per_pop)
        spacerItem139 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem139)
        self.label_tajimasd_window_size = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_tajimasd_window_size.setObjectName("label_tajimasd_window_size")
        self.verticalLayout_14.addWidget(self.label_tajimasd_window_size)
        spacerItem140 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem140)
        self.label_fst_window_size = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_fst_window_size.setObjectName("label_fst_window_size")
        self.verticalLayout_14.addWidget(self.label_fst_window_size)
        spacerItem141 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem141)
        self.label_fst_step_size = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_fst_step_size.setObjectName("label_fst_step_size")
        self.verticalLayout_14.addWidget(self.label_fst_step_size)
        spacerItem142 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem142)
        self.label_pi_window_size = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_pi_window_size.setObjectName("label_pi_window_size")
        self.verticalLayout_14.addWidget(self.label_pi_window_size)
        spacerItem143 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem143)
        self.label_pi_step_size = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_pi_step_size.setObjectName("label_pi_step_size")
        self.verticalLayout_14.addWidget(self.label_pi_step_size)
        spacerItem144 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem144)
        self.label_skip_pop = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_skip_pop.setObjectName("label_skip_pop")
        self.verticalLayout_14.addWidget(self.label_skip_pop)
        spacerItem145 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem145)
        self.label_anc_files = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_anc_files.setObjectName("label_anc_files")
        self.verticalLayout_14.addWidget(self.label_anc_files)
        spacerItem146 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem146)
        self.label_grid_space = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_grid_space.setObjectName("label_grid_space")
        self.verticalLayout_14.addWidget(self.label_grid_space)
        spacerItem147 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_14.addItem(spacerItem147)
        self.label_grid_points = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_grid_points.setObjectName("label_grid_points")
        self.verticalLayout_14.addWidget(self.label_grid_points)
        self.layoutWidget_9 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_9.setGeometry(QtCore.QRect(990, 60, 121, 541))
        self.layoutWidget_9.setObjectName("layoutWidget_9")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.layoutWidget_9)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.label_use_recomb_map = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_use_recomb_map.setObjectName("label_use_recomb_map")
        self.verticalLayout_15.addWidget(self.label_use_recomb_map)
        spacerItem148 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_15.addItem(spacerItem148)
        self.label_burnin_val = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_burnin_val.setObjectName("label_burnin_val")
        self.verticalLayout_15.addWidget(self.label_burnin_val)
        spacerItem149 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_15.addItem(spacerItem149)
        self.label_iteration_val = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_iteration_val.setObjectName("label_iteration_val")
        self.verticalLayout_15.addWidget(self.label_iteration_val)
        spacerItem150 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_15.addItem(spacerItem150)
        self.label_ne_val = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_ne_val.setObjectName("label_ne_val")
        self.verticalLayout_15.addWidget(self.label_ne_val)
        spacerItem151 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_15.addItem(spacerItem151)
        self.label_selscan_map = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_selscan_map.setObjectName("label_selscan_map")
        self.verticalLayout_15.addWidget(self.label_selscan_map)
        spacerItem152 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_15.addItem(spacerItem152)
        self.label_ihs_args = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_ihs_args.setObjectName("label_ihs_args")
        self.verticalLayout_15.addWidget(self.label_ihs_args)
        spacerItem153 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_15.addItem(spacerItem153)
        self.label_xpehh_args = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_xpehh_args.setObjectName("label_xpehh_args")
        self.verticalLayout_15.addWidget(self.label_xpehh_args)
        spacerItem154 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_15.addItem(spacerItem154)
        self.label_ref_vcf = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_ref_vcf.setObjectName("label_ref_vcf")
        self.verticalLayout_15.addWidget(self.label_ref_vcf)
        spacerItem155 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_15.addItem(spacerItem155)
        self.label_cm_map = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_cm_map.setObjectName("label_cm_map")
        self.verticalLayout_15.addWidget(self.label_cm_map)
        self.layoutWidget_13 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_13.setGeometry(QtCore.QRect(20, 60, 131, 611))
        self.layoutWidget_13.setObjectName("layoutWidget_13")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.layoutWidget_13)
        self.verticalLayout_21.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.label_sig_vel = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_sig_vel.setObjectName("label_sig_vel")
        self.verticalLayout_21.addWidget(self.label_sig_vel)
        spacerItem156 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_21.addItem(spacerItem156)
        self.label_tajimas_d = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_tajimas_d.setObjectName("label_tajimas_d")
        self.verticalLayout_21.addWidget(self.label_tajimas_d)
        spacerItem157 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_21.addItem(spacerItem157)
        self.label_pi = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_pi.setObjectName("label_pi")
        self.verticalLayout_21.addWidget(self.label_pi)
        spacerItem158 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_21.addItem(spacerItem158)
        self.label_pairwise_fst = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_pairwise_fst.setObjectName("label_pairwise_fst")
        self.verticalLayout_21.addWidget(self.label_pairwise_fst)
        spacerItem160 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_21.addItem(spacerItem160)
        self.label_single_vs_all_fst = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_single_vs_all_fst.setObjectName("label_single_vs_all_fst")
        self.verticalLayout_21.addWidget(self.label_single_vs_all_fst)
        spacerItem161 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_21.addItem(spacerItem161)
        self.label_skip_chrmwise = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_skip_chrmwise.setObjectName("label_skip_chrmwise")
        self.verticalLayout_21.addWidget(self.label_skip_chrmwise)
        spacerItem162 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_21.addItem(spacerItem162)
        self.label_skip_phasing = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_skip_phasing.setObjectName("label_skip_phasing")
        self.verticalLayout_21.addWidget(self.label_skip_phasing)
        spacerItem163 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_21.addItem(spacerItem163)
        self.label_skip_sel_outgroup = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_skip_sel_outgroup.setObjectName("label_skip_sel_outgroup")
        self.verticalLayout_21.addWidget(self.label_skip_sel_outgroup)
        spacerItem164 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_21.addItem(spacerItem164)
        self.label_clr = QtWidgets.QLabel(self.layoutWidget_13)
        self.label_clr.setObjectName("label_clr")
        self.verticalLayout_21.addWidget(self.label_clr)
        self.layoutWidget_14 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_14.setGeometry(QtCore.QRect(280, 60, 157, 281))
        self.layoutWidget_14.setObjectName("layoutWidget_14")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.layoutWidget_14)
        self.verticalLayout_22.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.label_ihs = QtWidgets.QLabel(self.layoutWidget_14)
        self.label_ihs.setObjectName("label_ihs")
        self.verticalLayout_22.addWidget(self.label_ihs)
        spacerItem165 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_22.addItem(spacerItem165)
        self.label_nsl = QtWidgets.QLabel(self.layoutWidget_14)
        self.label_nsl.setObjectName("label_nsl")
        self.verticalLayout_22.addWidget(self.label_nsl)
        spacerItem166 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_22.addItem(spacerItem166)
        self.label_xpehh = QtWidgets.QLabel(self.layoutWidget_14)
        self.label_xpehh.setObjectName("label_xpehh")
        self.verticalLayout_22.addWidget(self.label_xpehh)
        spacerItem167 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_22.addItem(spacerItem167)
        self.label_impute_status = QtWidgets.QLabel(self.layoutWidget_14)
        self.label_impute_status.setObjectName("label_impute_status")
        self.verticalLayout_22.addWidget(self.label_impute_status)
        spacerItem168 = QtWidgets.QSpacerItem(
            18, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_22.addItem(spacerItem168)
        self.label_useprecomputed_afs = QtWidgets.QLabel(self.layoutWidget_14)
        self.label_useprecomputed_afs.setObjectName("label_useprecomputed_afs")
        self.verticalLayout_22.addWidget(self.label_useprecomputed_afs)
        self.layoutWidget_7 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_7.setGeometry(QtCore.QRect(750, 60, 144, 612))
        self.layoutWidget_7.setObjectName("layoutWidget_7")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.layoutWidget_7)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.le_min_samples_per_pop()
        spacerItem169 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem169)
        self.le_tajimasd_window_size()
        spacerItem170 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem170)
        self.le_fst_window_size()
        spacerItem171 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem171)
        self.le_fst_step_size()
        spacerItem172 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem172)
        self.le_pi_window_size()
        spacerItem173 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem173)
        self.le_pi_step_size()
        spacerItem174 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem174)
        self.le_skip_pop()
        spacerItem175 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem175)
        self.le_anc_files()
        spacerItem176 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem176)
        self.le_grid_space()
        spacerItem177 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_13.addItem(spacerItem177)
        self.le_grid_points()
        self.layoutWidget_10 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_10.setGeometry(QtCore.QRect(910, 60, 20, 612))
        self.layoutWidget_10.setObjectName("layoutWidget_10")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.layoutWidget_10)
        self.verticalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.layoutWidget_15 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_15.setGeometry(QtCore.QRect(1130, 60, 144, 541))
        self.layoutWidget_15.setObjectName("layoutWidget_15")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.layoutWidget_15)
        self.verticalLayout_24.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.le_use_recomb_map()
        spacerItem187 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_24.addItem(spacerItem187)
        self.le_burnin_val()
        spacerItem188 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_24.addItem(spacerItem188)
        self.le_iterations_val()
        spacerItem189 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_24.addItem(spacerItem189)
        self.le_ne_val()
        spacerItem190 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_24.addItem(spacerItem190)
        self.le_selscan_map()
        spacerItem191 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_24.addItem(spacerItem191)
        self.le_ihs_args()
        spacerItem192 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_24.addItem(spacerItem192)
        self.le_xphh_args()
        spacerItem193 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_24.addItem(spacerItem193)
        self.le_ref_vcf()
        spacerItem194 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_24.addItem(spacerItem194)
        self.le_cm_map()
        self.layoutWidget_16 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_16.setGeometry(QtCore.QRect(1290, 60, 20, 541))
        self.layoutWidget_16.setObjectName("layoutWidget_16")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout(self.layoutWidget_16)
        self.verticalLayout_25.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.layoutWidget_17 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_17.setGeometry(QtCore.QRect(170, 60, 21, 611))
        self.layoutWidget_17.setObjectName("layoutWidget_17")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.layoutWidget_17)
        self.verticalLayout_26.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.cb_sig_sel()
        spacerItem203 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_26.addItem(spacerItem203)
        self.cb_tajimas_d()
        spacerItem204 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_26.addItem(spacerItem204)
        self.cb_pi()
        spacerItem205 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_26.addItem(spacerItem205)
        self.cb_pairwise_fst()
        spacerItem207 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_26.addItem(spacerItem207)
        self.cb_single_vs_all_fst()
        spacerItem208 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_26.addItem(spacerItem208)
        self.cb_skip_chrmwise()
        spacerItem209 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_26.addItem(spacerItem209)
        self.cb_skip_phasing()
        spacerItem210 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_26.addItem(spacerItem210)
        self.cb_skip_sel_outgroup()
        spacerItem211 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_26.addItem(spacerItem211)
        self.cb_clr()
        self.layoutWidget_19 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_19.setGeometry(QtCore.QRect(450, 60, 21, 281))
        self.layoutWidget_19.setObjectName("layoutWidget_19")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.layoutWidget_19)
        self.verticalLayout_28.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.cb_ihs()
        spacerItem221 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_28.addItem(spacerItem221)
        self.cb_nsl()
        spacerItem222 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_28.addItem(spacerItem222)
        self.cb_xpehh()
        spacerItem223 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_28.addItem(spacerItem223)
        self.cb_impute_status()
        spacerItem224 = QtWidgets.QSpacerItem(
            18, 28, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_28.addItem(spacerItem224)
        self.cb_use_precomputed_afs()
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(self.tab_4)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(20, 730, 1291, 41))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.tabWidget_general_params.addTab(self.tab_4, "")

    def le_min_samples_per_pop(self):
        self.lineEdit_min_samples_per_pop = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_min_samples_per_pop.setObjectName("lineEdit_min_samples_per_pop")
        self.verticalLayout_13.addWidget(self.lineEdit_min_samples_per_pop)
        self.lineEdit_min_samples_per_pop.setToolTip(
            " populations with number of samples lower than treshold provided here will be excluded from the analyses. Default: 2"
        )
        self.sig_sel_params_dict[
            "min_samples_per_pop"
        ] = self.lineEdit_min_samples_per_pop

    def le_tajimasd_window_size(self):
        self.lineEdit_tajimasd_window_size = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_tajimasd_window_size.setObjectName(
            "lineEdit_tajimasd_window_size"
        )
        self.verticalLayout_13.addWidget(self.lineEdit_tajimasd_window_size)
        self.lineEdit_tajimasd_window_size.setToolTip(
            "window size for Tajimas D calculation. Default: -9"
        )
        self.sig_sel_params_dict[
            "tajimasd_window_size"
        ] = self.lineEdit_tajimasd_window_size

    def le_fst_window_size(self):
        self.lineEdit_fst_window_size = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_fst_window_size.setObjectName("lineEdit_fst_window_size")
        self.verticalLayout_13.addWidget(self.lineEdit_fst_window_size)
        self.lineEdit_fst_window_size.setToolTip(
            "window size for Fst calculation, default: -9"
        )
        self.sig_sel_params_dict["fst_window_size"] = self.lineEdit_fst_window_size

    def le_fst_step_size(self):
        self.lineEdit_fst_step_size = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_fst_step_size.setObjectName("lineEdit_fst_step_size")
        self.verticalLayout_13.addWidget(self.lineEdit_fst_step_size)
        self.lineEdit_fst_step_size.setToolTip(
            "step size for fst calculation along with the window size, default:-9"
        )
        self.sig_sel_params_dict["fst_step_size"] = self.lineEdit_fst_step_size

    def le_pi_window_size(self):
        self.lineEdit_pi_window_size = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_pi_window_size.setObjectName("lineEdit_pi_window_size")
        self.verticalLayout_13.addWidget(self.lineEdit_pi_window_size)
        self.lineEdit_pi_window_size.setToolTip(
            "window size for pi calculation. Default: -9"
        )
        self.sig_sel_params_dict["pi_window_size"] = self.lineEdit_pi_window_size

    def le_pi_step_size(self):
        self.lineEdit_pi_step_size = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_pi_step_size.setObjectName("lineEdit_pi_step_size")
        self.verticalLayout_13.addWidget(self.lineEdit_pi_step_size)
        self.lineEdit_pi_step_size.setToolTip(
            "step size for pi calculation. Default:-9"
        )
        self.sig_sel_params_dict["pi_step_size"] = self.lineEdit_pi_step_size

    def le_skip_pop(self):
        self.lineEdit_skip_pop = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_skip_pop.setObjectName("lineEdit_skip_pop")
        self.verticalLayout_13.addWidget(self.lineEdit_skip_pop)
        self.lineEdit_skip_pop.setToolTip(
            'path to the file containing a list of population IDs that will not be used for ???? . Default: "none"'
        )
        self.sig_sel_params_dict["skip_pop"] = self.lineEdit_skip_pop

    def le_anc_files(self):
        self.lineEdit_anc_files = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_anc_files.setObjectName("lineEdit_anc_files")
        self.verticalLayout_13.addWidget(self.lineEdit_anc_files)
        self.lineEdit_anc_files.setToolTip(
            'detecting ancestral allels for the analyses of CLR, iHS and XP-EHH (Options: "create","none","path to csv file with listed anc files") . With "create" the module will create input files based on outgroup selected in general parameters. The user can also provide path to the csv file with own ancestral files or skip this option with "none". Default: "create"'
        )
        self.sig_sel_params_dict["anc_files"] = self.lineEdit_anc_files

    def le_grid_space(self):
        self.lineEdit_grid_space = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_grid_space.setObjectName("lineEdit_grid_space")
        self.verticalLayout_13.addWidget(self.lineEdit_grid_space)
        self.lineEdit_grid_space.setToolTip(
            'user-defined space between grid-points, option "g" of SweepFinder2'
        )
        self.sig_sel_params_dict["grid_space"] = self.lineEdit_grid_space

    def le_grid_points(self):
        self.lineEdit_grid_points = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.lineEdit_grid_points.setObjectName("lineEdit_grid_points")
        self.verticalLayout_13.addWidget(self.lineEdit_grid_points)
        self.lineEdit_grid_points.setToolTip(
            'user-defined number of equally spaced points to be tested, option "G" of SweepFinder2. default:10000'
        )
        self.sig_sel_params_dict["grid_points"] = self.lineEdit_grid_points

    def le_use_recomb_map(self):
        self.lineEdit_use_recomb_map = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_use_recomb_map.setObjectName("lineEdit_use_recomb_map")
        self.verticalLayout_24.addWidget(self.lineEdit_use_recomb_map)
        self.sig_sel_params_dict["use_recomb_map"] = self.lineEdit_use_recomb_map
        self.lineEdit_use_recomb_map.setToolTip(
            'if set to "default" it will create recombination rate input file to perform a scan for selective sweeps with pre-computed empirical frequency spectrum and a recombination map, option "-lr" of SweepFinder2. Other options are "none", which will not perform it, or "path" Default: default'
        )

    def le_burnin_val(self):
        self.lineEdit_burnin_val = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_burnin_val.setObjectName("lineEdit_burnin_val")
        self.verticalLayout_24.addWidget(self.lineEdit_burnin_val)
        self.sig_sel_params_dict["burnin_val"] = self.lineEdit_burnin_val
        self.lineEdit_burnin_val.setToolTip(
            "the maximum number of burnin iterations used to infer genotype phase. Default: 3"
        )

    def le_iterations_val(self):
        self.lineEdit_iterations_val = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_iterations_val.setObjectName("lineEdit_iterations_val")
        self.verticalLayout_24.addWidget(self.lineEdit_iterations_val)
        self.sig_sel_params_dict["iterations_val"] = self.lineEdit_iterations_val
        self.lineEdit_iterations_val.setToolTip(
            "the number of iterations used to estimate genotype phase. Default: 12"
        )

    def le_ne_val(self):
        self.lineEdit_ne_val = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_ne_val.setObjectName("lineEdit_ne_val")
        self.verticalLayout_24.addWidget(self.lineEdit_ne_val)
        self.sig_sel_params_dict["ne_val"] = self.lineEdit_ne_val
        self.lineEdit_ne_val.setToolTip(
            "the effective population size for phasing using beagle. Default: 1000000"
        )

    def le_selscan_map(self):
        self.lineEdit_selscan_map = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_selscan_map.setObjectName("lineEdit_selscan_map")
        self.verticalLayout_24.addWidget(self.lineEdit_selscan_map)
        self.sig_sel_params_dict["selscan_map"] = self.lineEdit_selscan_map
        self.lineEdit_selscan_map.setToolTip(
            'if "none" it will create mapfile with genetic and physical positions for each variant site. The other option is providing path to csv file containing two columns: chromomosme name, mapfile. Default: "none"'
        )

    def le_ihs_args(self):
        self.lineEdit_ihs_args = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_ihs_args.setObjectName("lineEdit_ihs_args")
        self.verticalLayout_24.addWidget(self.lineEdit_ihs_args)
        self.sig_sel_params_dict["ihs_args"] = self.lineEdit_ihs_args
        self.lineEdit_ihs_args.setToolTip(
            'optional parameters that can be applied to iHS computation. Please check the list of these parameters here: https://github.com/szpiech/selscan/blob/master/manual/selscan-manual.pdf. Default: "none"'
        )

    def le_xphh_args(self):
        self.lineEdit_xpehh_args = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_xpehh_args.setObjectName("lineEdit_xpehh_args")
        self.verticalLayout_24.addWidget(self.lineEdit_xpehh_args)
        self.sig_sel_params_dict["xpehh_args"] = self.lineEdit_xpehh_args
        self.lineEdit_xpehh_args.setToolTip(
            'optional parameters that can be applied to XP-EHH computation. Please check the list of these parameters here: https://github.com/szpiech/selscan/blob/master/manual/selscan-manual.pdf. Default: "none"'
        )

    def le_ref_vcf(self):
        self.lineEdit_ref_vcf = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_ref_vcf.setObjectName("lineEdit_ref_vcf")
        self.verticalLayout_24.addWidget(self.lineEdit_ref_vcf)
        self.sig_sel_params_dict["ref_vcf"] = self.lineEdit_ref_vcf
        self.lineEdit_ref_vcf.setToolTip(
            'an option to provide path to the VCF file of refference panel. Default: "none"'
        )

    def le_cm_map(self):
        self.lineEdit_cm_map = QtWidgets.QLineEdit(self.layoutWidget_15)
        self.lineEdit_cm_map.setObjectName("lineEdit_cm_map")
        self.verticalLayout_24.addWidget(self.lineEdit_cm_map)
        self.sig_sel_params_dict["cm_map"] = self.lineEdit_cm_map
        self.lineEdit_cm_map.setToolTip(
            'option to provide path to the PLINK format genetic map with cM units. Default: "none"'
        )

    def cb_sig_sel(self):
        self.checkBox_sig_sel = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_sig_sel.setText("")
        self.checkBox_sig_sel.setObjectName("checkBox_sig_sel")
        self.checkBox_sig_sel.setChecked(False)
        self.checkBox_sig_sel.setCheckable(True)
        self.checkBox_sig_sel.setTristate(False)
        self.verticalLayout_26.addWidget(self.checkBox_sig_sel)
        self.checkBox_sig_sel.stateChanged.connect(self.cb_sig_sel_actions)
        self.checkBox_sig_sel.setToolTip(
            "whether to run sig_sel analysis. Default: false"
        )
        self.sig_sel_params_dict["sig_sel"] = self.v_sig_sel
        self.params_bool_list.append("sig_sel")

    def cb_sig_sel_actions(self):
        if not self.v_sig_sel:
            self.v_sig_sel = True
        else:
            self.v_sig_sel = False
        self.sig_sel_params_dict["sig_sel"] = self.v_sig_sel

    def cb_tajimas_d(self):
        self.checkBox_tajimas_d = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_tajimas_d.setText("")
        self.checkBox_tajimas_d.setObjectName("checkBox_tajimas_d")
        self.verticalLayout_26.addWidget(self.checkBox_tajimas_d)
        self.checkBox_tajimas_d.setChecked(False)
        self.checkBox_tajimas_d.setCheckable(True)
        self.checkBox_tajimas_d.setTristate(False)
        self.checkBox_tajimas_d.stateChanged.connect(self.cb_tajimas_d_actions)
        self.checkBox_tajimas_d.setToolTip(
            "whether to run tajimas_d analysis. Default: false"
        )
        self.sig_sel_params_dict["tajimas_d"] = self.v_tajimas_d
        self.params_bool_list.append("tajimas_d")

    def cb_tajimas_d_actions(self):
        if not self.v_tajimas_d:
            self.v_tajimas_d = True
        else:
            self.v_tajimas_d = False
        self.sig_sel_params_dict["tajimas_d"] = self.v_tajimas_d

    def cb_pi(self):
        self.checkBox_pi = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_pi.setText("")
        self.checkBox_pi.setObjectName("checkBox_pi")
        self.verticalLayout_26.addWidget(self.checkBox_pi)
        self.checkBox_pi.setChecked(False)
        self.checkBox_pi.setCheckable(True)
        self.checkBox_pi.setTristate(False)
        self.checkBox_pi.stateChanged.connect(self.cb_pi_actions)
        self.checkBox_pi.setToolTip("whether to run pi analysis. Default: false")
        self.sig_sel_params_dict["pi"] = self.v_pi
        self.params_bool_list.append("pi")

    def cb_pi_actions(self):
        if not self.v_pi:
            self.v_pi = True
        else:
            self.v_pi = False
        self.sig_sel_params_dict["pi"] = self.v_pi

    def cb_pairwise_fst(self):
        self.checkBox_pairwise_fst = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_pairwise_fst.setText("")
        self.checkBox_pairwise_fst.setObjectName("checkBox_pairwise_fst")
        self.verticalLayout_26.addWidget(self.checkBox_pairwise_fst)
        self.checkBox_pairwise_fst.setChecked(False)
        self.checkBox_pairwise_fst.setCheckable(True)
        self.checkBox_pairwise_fst.setTristate(False)
        self.checkBox_pairwise_fst.stateChanged.connect(self.cb_pairwise_fst_actions)
        self.checkBox_pairwise_fst.setToolTip(
            "whether to run pairwise_fst analysis. Default: false"
        )
        self.sig_sel_params_dict["pairwise_fst"] = self.v_pairwise_fst
        self.params_bool_list.append("pairwise_fst")

    def cb_pairwise_fst_actions(self):
        if not self.v_pairwise_fst:
            self.v_pairwise_fst = True
        else:
            self.v_pairwise_fst = False
        self.sig_sel_params_dict["pairwise_fst"] = self.v_pairwise_fst

    def cb_single_vs_all_fst(self):
        self.checkBox_single_vs_all_fst = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_single_vs_all_fst.setText("")
        self.checkBox_single_vs_all_fst.setObjectName("checkBox_single_vs_all_fst")
        self.verticalLayout_26.addWidget(self.checkBox_single_vs_all_fst)
        self.checkBox_single_vs_all_fst.setChecked(False)
        self.checkBox_single_vs_all_fst.setCheckable(True)
        self.checkBox_single_vs_all_fst.setTristate(False)
        self.checkBox_single_vs_all_fst.stateChanged.connect(
            self.cb_single_vs_all_fst_actions
        )
        self.checkBox_single_vs_all_fst.setToolTip(
            "whether to run single_vs_all_fst analysis. Default: false"
        )
        self.sig_sel_params_dict["single_vs_all_fst"] = self.v_single_vs_all_fst
        self.params_bool_list.append("single_vs_all_fst")

    def cb_single_vs_all_fst_actions(self):
        if not self.v_single_vs_all_fst:
            self.v_single_vs_all_fst = True
        else:
            self.v_single_vs_all_fst = False
        self.sig_sel_params_dict["single_vs_all_fst"] = self.v_single_vs_all_fst

    def cb_skip_chrmwise(self):
        self.checkBox_skip_chrmwise = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_skip_chrmwise.setText("")
        self.checkBox_skip_chrmwise.setObjectName("checkBox_skip_chrmwise")
        self.verticalLayout_26.addWidget(self.checkBox_skip_chrmwise)
        self.checkBox_skip_chrmwise.setCheckable(True)
        self.checkBox_skip_chrmwise.setTristate(False)
        self.checkBox_skip_chrmwise.stateChanged.connect(self.cb_skip_chrmwise_actions)
        self.checkBox_skip_chrmwise.setToolTip(
            "whether to run tajimas d, fst and pi after concatenating the chromosomes in vcf file. Default: false"
        )
        self.sig_sel_params_dict["skip_chrmwise"] = self.v_skip_chrmwise
        self.params_bool_list.append("skip_chrmwise")

    def cb_skip_chrmwise_actions(self):
        if not self.v_skip_chrmwise:
            self.v_skip_chrmwise = True
        else:
            self.v_skip_chrmwise = False
        self.sig_sel_params_dict["skip_chrmwise"] = self.v_skip_chrmwise

    def cb_skip_phasing(self):
        self.checkBox_skip_phasing = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_skip_phasing.setText("")
        self.checkBox_skip_phasing.setObjectName("checkBox_skip_phasing")
        self.verticalLayout_26.addWidget(self.checkBox_skip_phasing)
        self.checkBox_skip_phasing.setChecked(False)
        self.checkBox_skip_phasing.setCheckable(True)
        self.checkBox_skip_phasing.setTristate(False)
        self.checkBox_skip_phasing.stateChanged.connect(self.cb_skip_phasing_actions)
        self.checkBox_skip_phasing.setToolTip("whether to skip phasing. Default: false")
        self.sig_sel_params_dict["skip_phasing"] = self.v_skip_phasing
        self.params_bool_list.append("skip_phasing")

    def cb_skip_phasing_actions(self):
        if not self.v_skip_phasing:
            self.v_skip_phasing = True
        else:
            self.v_skip_phasing = False
        self.sig_sel_params_dict["skip_phasing"] = self.v_skip_phasing

    def cb_skip_sel_outgroup(self):
        self.checkBox_skip_sel_outgroup = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_skip_sel_outgroup.setText("")
        self.checkBox_skip_sel_outgroup.setObjectName("checkBox_skip_sel_outgroup")
        self.verticalLayout_26.addWidget(self.checkBox_skip_sel_outgroup)
        self.checkBox_skip_sel_outgroup.setChecked(False)
        self.checkBox_skip_sel_outgroup.setCheckable(True)
        self.checkBox_skip_sel_outgroup.setTristate(False)
        self.checkBox_skip_sel_outgroup.stateChanged.connect(
            self.cb_skip_sel_outgroup_actions
        )
        self.checkBox_skip_sel_outgroup.setToolTip(
            "whether to skip sel_outgroup. Default: false"
        )
        self.sig_sel_params_dict["skip_sel_outgroup"] = self.v_skip_sel_outgroup
        self.params_bool_list.append("skip_sel_outgroup")

    def cb_skip_sel_outgroup_actions(self):
        if not self.v_skip_sel_outgroup:
            self.v_skip_sel_outgroup = True
        else:
            self.v_skip_sel_outgroup = False
        self.sig_sel_params_dict["skip_sel_outgroup"] = self.v_skip_sel_outgroup

    def cb_clr(self):
        self.checkBox_clr = QtWidgets.QCheckBox(self.layoutWidget_17)
        self.checkBox_clr.setText("")
        self.checkBox_clr.setObjectName("checkBox_clr")
        self.verticalLayout_26.addWidget(self.checkBox_clr)
        self.checkBox_clr.setChecked(False)
        self.checkBox_clr.setCheckable(True)
        self.checkBox_clr.setTristate(False)
        self.checkBox_clr.stateChanged.connect(self.cb_clr_actions)
        self.checkBox_clr.setToolTip(
            "whether to carry out clr analysis using sweepfinder2. Default: false"
        )
        self.sig_sel_params_dict["clr"] = self.v_clr
        self.params_bool_list.append("clr")

    def cb_clr_actions(self):
        if not self.v_clr:
            self.v_clr = True
        else:
            self.v_clr = False
        self.sig_sel_params_dict["clr"] = self.v_clr

    def cb_ihs(self):
        self.checkBox_ihs = QtWidgets.QCheckBox(self.layoutWidget_19)
        self.checkBox_ihs.setText("")
        self.checkBox_ihs.setObjectName("checkBox_ihs")
        self.verticalLayout_28.addWidget(self.checkBox_ihs)
        self.checkBox_ihs.setChecked(False)
        self.checkBox_ihs.setCheckable(True)
        self.checkBox_ihs.setTristate(False)
        self.checkBox_ihs.stateChanged.connect(self.cb_ihs_actions)
        self.checkBox_ihs.setToolTip(
            "whether to carry out ihs analysis using selscan2. Default: false"
        )
        self.sig_sel_params_dict["ihs"] = self.v_ihs
        self.params_bool_list.append("ihs")

    def cb_ihs_actions(self):
        if not self.v_ihs:
            self.v_ihs = True
        else:
            self.v_ihs = False
        self.sig_sel_params_dict["ihs"] = self.v_ihs

    def cb_nsl(self):
        self.checkBox_nsl = QtWidgets.QCheckBox(self.layoutWidget_19)
        self.checkBox_nsl.setText("")
        self.checkBox_nsl.setObjectName("checkBox_nsl")
        self.verticalLayout_28.addWidget(self.checkBox_nsl)
        self.checkBox_nsl.setChecked(False)
        self.checkBox_nsl.setCheckable(True)
        self.checkBox_nsl.setTristate(False)
        self.checkBox_nsl.stateChanged.connect(self.cb_nsl_actions)
        self.checkBox_nsl.setToolTip(
            "whether to carry out nsl analysis using selscan2. Default: false"
        )
        self.sig_sel_params_dict["nsl"] = self.v_nsl
        self.params_bool_list.append("nsl")

    def cb_nsl_actions(self):
        if not self.v_nsl:
            self.v_nsl = True
        else:
            self.v_nsl = False
        self.sig_sel_params_dict["nsl"] = self.v_nsl

    def cb_xpehh(self):
        self.checkBox_xpehh = QtWidgets.QCheckBox(self.layoutWidget_19)
        self.checkBox_xpehh.setText("")
        self.checkBox_xpehh.setObjectName("checkBox_xpehh")
        self.verticalLayout_28.addWidget(self.checkBox_xpehh)
        self.checkBox_xpehh.setChecked(False)
        self.checkBox_xpehh.setCheckable(True)
        self.checkBox_xpehh.setTristate(False)
        self.checkBox_xpehh.stateChanged.connect(self.cb_xpehh_actions)
        self.checkBox_xpehh.setToolTip(
            "whether to carry out xpehh analysis using selscan2. Default: false"
        )
        self.sig_sel_params_dict["xpehh"] = self.v_xpehh
        self.params_bool_list.append("xpehh")

    def cb_xpehh_actions(self):
        if not self.v_xpehh:
            self.v_xpehh = True
        else:
            self.v_xpehh = False
        self.sig_sel_params_dict["xpehh"] = self.v_xpehh

    def cb_impute_status(self):
        self.checkBox_impute_status = QtWidgets.QCheckBox(self.layoutWidget_19)
        self.checkBox_impute_status.setText("")
        self.checkBox_impute_status.setObjectName("checkBox_impute_status")
        self.verticalLayout_28.addWidget(self.checkBox_impute_status)
        self.checkBox_impute_status.setChecked(False)
        self.checkBox_impute_status.setCheckable(True)
        self.checkBox_impute_status.setTristate(False)
        self.checkBox_impute_status.stateChanged.connect(self.cb_impute_status_actions)
        self.checkBox_impute_status.setToolTip(
            "whether to carry out impute_status analysis using selscan2. Default: false"
        )
        self.sig_sel_params_dict["impute_status"] = self.v_impute_status
        self.params_bool_list.append("impute_status")

    def cb_impute_status_actions(self):
        if not self.v_impute_status:
            self.v_impute_status = True
        else:
            self.v_impute_status = False
        self.sig_sel_params_dict["impute_status"] = self.v_impute_status

    def cb_use_precomputed_afs(self):
        self.checkBox_use_precomputed_afs = QtWidgets.QCheckBox(self.layoutWidget_19)
        self.checkBox_use_precomputed_afs.setText("")
        self.checkBox_use_precomputed_afs.setObjectName("checkBox_use_precomputed_afs")
        self.verticalLayout_28.addWidget(self.checkBox_use_precomputed_afs)
        self.checkBox_use_precomputed_afs.setChecked(False)
        self.checkBox_use_precomputed_afs.setCheckable(True)
        self.checkBox_use_precomputed_afs.setTristate(False)
        self.checkBox_use_precomputed_afs.stateChanged.connect(
            self.cb_use_precomputed_afs_actions
        )
        self.checkBox_use_precomputed_afs.setToolTip(
            "whether to carry out use_precomputed_afs analysis using selscan2. Default: false"
        )
        self.sig_sel_params_dict["use_precomputed_afs"] = self.v_use_precomputed_afs
        self.params_bool_list.append("use_precomputed_afs")

    def cb_use_precomputed_afs_actions(self):
        if not self.v_use_precomputed_afs:
            self.v_use_precomputed_afs = True
        else:
            self.v_use_precomputed_afs = False
        self.sig_sel_params_dict["use_precomputed_afs"] = self.v_use_precomputed_afs

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Scaleopgen"))
        self.label_input.setText(_translate("MainWindow", "input"))
        self.label_outDir.setText(_translate("MainWindow", "outDir"))
        self.label_sample_map.setText(_translate("MainWindow", "sample_map "))
        self.label_geo_plot_yml.setText(_translate("MainWindow", "geo_plot_yml"))
        self.label_tile_yml.setText(_translate("MainWindow", "tile_yml"))
        self.label_chrm_map.setText(_translate("MainWindow", "chrm_map"))
        self.label_f_pop_cord.setText(_translate("MainWindow", "f_pop_cord"))
        self.label_f_pop_color.setText(_translate("MainWindow", "f_pop_color"))
        self.label_fasta.setText(_translate("MainWindow", "fasta"))
        self.label_concate_vcf_prefix.setText(
            _translate("MainWindow", "concate_vcf_prefix")
        )
        self.lineEdit_input.setText(_translate("MainWindow", "none"))
        self.lineEdit_outDir.setText(_translate("MainWindow", "none"))
        self.lineEdit_sample_map.setText(_translate("MainWindow", "none"))
        self.lineEdit_geo_plot_yml.setText(
            _translate(
                "MainWindow", "${baseDir}/parameters/plots/plot_sample_on_map.yml"
            )
        )
        self.lineEdit_tile_yml.setText(
            _translate("MainWindow", "${baseDir}/parameters/plots/tiles_info.yml")
        )
        self.lineEdit_chrom_map.setText(_translate("MainWindow", "none"))
        self.lineEdit_f_pop_cord.setText(_translate("MainWindow", "none"))
        self.lineEdit_f_pop_color.setText(_translate("MainWindow", "none"))
        self.lineEdit_fasta.setText(_translate("MainWindow", "none"))
        self.lineEdit_concate_vcf_prefix.setText(
            _translate("MainWindow", "scalepopgen")
        )
        self.label_cm_to_bp.setText(_translate("MainWindow", "cm_to_bp"))
        self.label_max_chrom.setText(_translate("MainWindow", "max_chrom"))
        self.label_outgroup.setText(_translate("MainWindow", "outgroup"))
        self.label_allow_extra_chrom.setText(
            _translate("MainWindow", "allow_extra_chrom")
        )
        self.lineEdit_cm_to_bp.setText(_translate("MainWindow", "1000000"))
        self.lineEdit_max_chrom.setText(_translate("MainWindow", "29"))
        self.lineEdit_outgroup.setText(_translate("MainWindow", "none"))
        self.tabWidget_general_params.setTabText(
            self.tabWidget_general_params.indexOf(self.tab),
            _translate("MainWindow", "general_params"),
        )
        self.label_rem_indi.setText(_translate("MainWindow", "rem_indi "))
        self.label_kingcutoff.setText(_translate("MainWindow", "king_cutoff "))
        self.label_mind.setText(_translate("MainWindow", "mind"))
        self.label_remove_snps.setText(_translate("MainWindow", "remove_snps"))
        self.label_maf.setText(_translate("MainWindow", "maf"))
        self.label_min_meanDP.setText(_translate("MainWindow", "min_meanDP"))
        self.label_max_meanDP.setText(_translate("MainWindow", "max_meanDP"))
        self.label_hwe.setText(_translate("MainWindow", "hwe"))
        self.label_max_missing.setText(_translate("MainWindow", "max_missing"))
        self.label_minQ.setText(_translate("MainWindow", "minQ"))
        self.label_apply_indi_filters.setText(
            _translate("MainWindow", "apply_indi_filters")
        )
        self.label_indiv_summary.setText(_translate("MainWindow", "indiv_summary "))
        self.label_apply_snp_filters.setText(
            _translate("MainWindow", "apply_snp_filters")
        )
        self.lineEdit_rem_indi.setText(_translate("MainWindow", "none"))
        self.lineEdit_king_cutoff.setText(_translate("MainWindow", "-9"))
        self.lineEdit_mind.setText(_translate("MainWindow", "-9"))
        self.lineEdit_remove_snps.setText(_translate("MainWindow", "none"))
        self.lineEdit_maf.setText(_translate("MainWindow", "-9"))
        self.lineEdit_min_meanDP.setText(_translate("MainWindow", "-9"))
        self.lineEdit_max_meanDP.setText(_translate("MainWindow", "-9"))
        self.lineEdit_hwe.setText(_translate("MainWindow", "-9"))
        self.lineEdit_max_missing.setText(_translate("MainWindow", "-9"))
        self.lineEdit_minQ.setText(_translate("MainWindow", "-9"))
        self.tabWidget_general_params.setTabText(
            self.tabWidget_general_params.indexOf(self.tab_3),
            _translate("MainWindow", "globalfilt_params"),
        )
        self.lineEdit_pca_yml.setText(
            _translate("MainWindow", "${baseDir}/parameters/plots/pca.yml")
        )
        self.lineEdit_nj_yml.setText(
            _translate("MainWindow", "${baseDir}/parameters/plots/fst_nj.yml")
        )
        self.lineEdit_ibs_nj_yml.setText(
            _translate("MainWindow", "${baseDir}/parameters/plots/ibs_nj.yml")
        )
        self.label_genetic_structure.setText(
            _translate("MainWindow", "genetic_structure")
        )
        self.label_run_smartpca.setText(_translate("MainWindow", "run_smartpca"))
        self.label_run_gds_pca.setText(_translate("MainWindow", "run_gds_pca"))
        self.label_ld_filt.setText(_translate("MainWindow", "ld_filt"))
        self.label_admixture.setText(_translate("MainWindow", "admixture"))
        self.label_fst_based_nj_tree.setText(
            _translate("MainWindow", "fst_based_nj_tree")
        )
        self.label_est1_min_ibs_based_nj_tree.setText(
            _translate("MainWindow", "est_1_min_ibs_based_nj_tree ")
        )
        self.label_pca_yml.setText(_translate("MainWindow", "pca_yml"))
        self.label_nj_yml.setText(_translate("MainWindow", "fst_nj_yml"))
        self.label_bs_nj_yml.setText(_translate("MainWindow", "ibs_nj_yml "))
        self.label_smartpca_param.setText(_translate("MainWindow", "smartpca_param"))
        self.label_pop_color_file.setText(_translate("MainWindow", " pop_color_file"))
        self.label_f_pop_marker.setText(_translate("MainWindow", "f_pop_marker"))
        self.label_ld_window_size.setText(_translate("MainWindow", "ld_window_size"))
        self.label_ld_step_size.setText(_translate("MainWindow", " ld_step_size "))
        self.label_starting_k_value.setText(
            _translate("MainWindow", "starting_k_value")
        )
        self.label_ending_k_value.setText(_translate("MainWindow", "ending_k_value"))
        self.lineEdit_smartpca_param.setText(_translate("MainWindow", "none"))
        self.lineEdit_pop_color_file.setText(_translate("MainWindow", "none"))
        self.lineEdit_f_pop_marker.setText(_translate("MainWindow", "none"))
        self.lineEdit_ld_window_size.setText(_translate("MainWindow", "50"))
        self.lineEdit_ld_step_size.setText(_translate("MainWindow", "10"))
        self.lineEdit_starting_k_value.setText(_translate("MainWindow", "1"))
        self.lineEdit_ending_k_value.setText(_translate("MainWindow", "2"))
        self.label_cross_validation.setText(
            _translate("MainWindow", "cross_validation")
        )
        self.label_termination_criteria.setText(
            _translate("MainWindow", "termination_criteria")
        )
        self.label_plot_pop_order.setText(_translate("MainWindow", "plot_pop_order  "))
        self.label_r2_value.setText(_translate("MainWindow", "r2_value"))
        self.label_structure_remove_indi.setText(
            _translate("MainWindow", "structure_remove_indi ")
        )
        self.label_admixture_yml.setText(_translate("MainWindow", "admixture_yml "))
        self.lineEdit_admixture_yml.setText(
            _translate("MainWinodw", "${baseDir}/parameters/plots/admixture.yml")
        )
        self.lineEdit_cross_validation.setText(_translate("MainWindow", "5"))
        self.lineEdit_termination_criteria.setText(_translate("MainWindow", "0.0001 "))
        self.lineEdit_plot_pop_order.setText(_translate("MainWindow", "none"))
        self.lineEdit_r2_value.setText(_translate("MainWindow", "0.01"))
        self.lineEdit_structure_remove_indi.setText(_translate("MainWindow", "none"))
        self.tabWidget_general_params.setTabText(
            self.tabWidget_general_params.indexOf(self.tab_2),
            _translate("MainWindow", "genstruct_params"),
        )
        self.label_treemix.setText(_translate("MainWindow", "treemix  "))
        self.label_n_bootstrap.setText(_translate("MainWindow", "n_bootstrap   "))
        self.label_upper_limit.setText(_translate("MainWindow", "upper_limit  "))
        self.label_starting_m_value.setText(
            _translate("MainWindow", "starting_m_value")
        )
        self.label_ending_m_value.setText(_translate("MainWindow", "ending_m_value   "))
        self.label_n_iter.setText(_translate("MainWindow", "n_iter"))
        self.label_k_snps.setText(_translate("MainWindow", "k_snps "))
        self.lineEdit_n_bootstrap.setText(_translate("MainWindow", "10"))
        self.lineEdit_upper_limit.setText(_translate("MainWindow", "30000"))
        self.lineEdit_starting_m_value.setText(_translate("MainWindow", "1"))
        self.lineEdit_ending_m_value.setText(_translate("MainWindow", "10"))
        self.lineEdit_niter.setText(_translate("MainWindow", "3"))
        self.lineEdit_k_snps.setText(_translate("MainWindow", "500"))
        self.tabWidget_general_params.setTabText(
            self.tabWidget_general_params.indexOf(self.tab_5),
            _translate("MainWindow", "treemix"),
        )
        self.label_min_samples_per_pop.setText(
            _translate("MainWindow", "min_samples_per_pop")
        )
        self.label_tajimasd_window_size.setText(
            _translate("MainWindow", "tajimasd_window_size")
        )
        self.label_fst_window_size.setText(_translate("MainWindow", "fst_window_size "))
        self.label_fst_step_size.setText(_translate("MainWindow", "fst_step_size "))
        self.label_pi_window_size.setText(_translate("MainWindow", "pi_window_size"))
        self.label_pi_step_size.setText(_translate("MainWindow", "pi_step_size  "))
        self.label_skip_pop.setText(_translate("MainWindow", "skip_pop"))
        self.label_anc_files.setText(_translate("MainWindow", "anc_files "))
        self.label_grid_space.setText(_translate("MainWindow", "grid_space"))
        self.label_grid_points.setText(_translate("MainWindow", "grid_points"))
        self.label_use_recomb_map.setText(_translate("MainWindow", "use_recomb_map"))
        self.label_burnin_val.setText(_translate("MainWindow", "burnin_val "))
        self.label_iteration_val.setText(_translate("MainWindow", "iterations_val "))
        self.label_ne_val.setText(_translate("MainWindow", "ne_val"))
        self.label_selscan_map.setText(_translate("MainWindow", "selscan_map"))
        self.label_ihs_args.setText(_translate("MainWindow", "ihs_args"))
        self.label_xpehh_args.setText(_translate("MainWindow", "xpehh_args"))
        self.label_ref_vcf.setText(_translate("MainWindow", "ref_vcf "))
        self.label_cm_map.setText(_translate("MainWindow", "cm_map    "))
        self.label_sig_vel.setText(_translate("MainWindow", "sig_sel "))
        self.label_tajimas_d.setText(_translate("MainWindow", "tajimas_d "))
        self.label_pi.setText(_translate("MainWindow", "pi"))
        self.label_pairwise_fst.setText(_translate("MainWindow", "pairwise_fst"))
        self.label_single_vs_all_fst.setText(
            _translate("MainWindow", "single_vs_all_fst")
        )
        self.label_skip_chrmwise.setText(_translate("MainWindow", "skip_chrmwise"))
        self.label_skip_phasing.setText(_translate("MainWindow", "skip_phasing"))
        self.label_skip_sel_outgroup.setText(
            _translate("MainWindow", "skip_sel_outgroup")
        )
        self.label_clr.setText(_translate("MainWindow", "clr"))
        self.label_ihs.setText(_translate("MainWindow", "ihs "))
        self.label_nsl.setText(_translate("MainWindow", "nsl   "))
        self.label_xpehh.setText(_translate("MainWindow", "xpehh"))
        self.label_impute_status.setText(_translate("MainWindow", "impute_status"))
        self.label_useprecomputed_afs.setText(
            _translate("MainWindow", "use_precomputed_afs ")
        )
        self.lineEdit_min_samples_per_pop.setText(_translate("MainWindow", "9"))
        self.lineEdit_tajimasd_window_size.setText(_translate("MainWindow", "50000"))
        self.lineEdit_fst_window_size.setText(_translate("MainWindow", "50000"))
        self.lineEdit_fst_step_size.setText(_translate("MainWindow", "10000"))
        self.lineEdit_pi_window_size.setText(_translate("MainWindow", "50000"))
        self.lineEdit_pi_step_size.setText(_translate("MainWindow", "10000"))
        self.lineEdit_skip_pop.setText(_translate("MainWindow", "none"))
        self.lineEdit_anc_files.setText(_translate("MainWindow", "none"))
        self.lineEdit_grid_space.setText(_translate("MainWindow", "50000"))
        self.lineEdit_grid_points.setText(_translate("MainWindow", "0"))
        self.lineEdit_use_recomb_map.setText(_translate("MainWindow", "default"))
        self.lineEdit_burnin_val.setText(_translate("MainWindow", "3"))
        self.lineEdit_iterations_val.setText(_translate("MainWindow", "12"))
        self.lineEdit_ne_val.setText(_translate("MainWindow", "1000000"))
        self.lineEdit_selscan_map.setText(_translate("MainWindow", "none"))
        self.lineEdit_ihs_args.setText(_translate("MainWindow", "none"))
        self.lineEdit_xpehh_args.setText(_translate("MainWindow", "none"))
        self.lineEdit_ref_vcf.setText(_translate("MainWindow", "none"))
        self.lineEdit_cm_map.setText(_translate("MainWindow", "none"))
        self.tabWidget_general_params.setTabText(
            self.tabWidget_general_params.indexOf(self.tab_4),
            _translate("MainWindow", "sig_sel_params"),
        )
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuCite.setTitle(_translate("MainWindow", "Cite"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.save_action.setText(_translate("MainWindow", "Save as"))
        self.exit_action.setText(_translate("MainWindow", "exit"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionModule_1.setText(_translate("MainWindow", "general_params"))
        self.actionModule_2.setText(_translate("MainWindow", "genstruct_params"))
        self.actionModule_3.setText(_translate("MainWindow", "globalfilt_params"))
        self.actionModule_4.setText(_translate("MainWindow", "sig_sel_params"))
        self.actionModule_5.setText(_translate("MainWindow", "treemix"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
